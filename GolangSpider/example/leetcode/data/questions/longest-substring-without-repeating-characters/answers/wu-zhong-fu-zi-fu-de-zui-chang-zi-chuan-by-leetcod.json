{"data":{"solutionArticle":{"title":"\u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32","slug":"wu-zhong-fu-zi-fu-de-zui-chang-zi-chuan-by-leetcod","reactedType":null,"status":"PUBLISHED","identifier":"wu-zhong-fu-zi-fu-de-zui-chang-zi-chuan-by-leetcod","canEdit":false,"reactions":[{"count":11,"reactionType":"AWESOME","__typename":"ArticleReactionCountNode"},{"count":1,"reactionType":"GOOD","__typename":"ArticleReactionCountNode"},{"count":0,"reactionType":"CONFUSED","__typename":"ArticleReactionCountNode"}],"tags":[{"name":"Hash Table","nameTranslated":"\u54c8\u5e0c\u8868","slug":"hash-table","__typename":"ArticleTagNode"},{"name":"Sliding Window","nameTranslated":"","slug":"sliding-window","__typename":"ArticleTagNode"},{"name":"Two Pointers","nameTranslated":"\u53cc\u6307\u9488","slug":"two-pointers","__typename":"ArticleTagNode"}],"createdAt":"2018-05-27T15:20:12.755996+00:00","thumbnail":"","author":{"username":"LeetCode","profile":{"userAvatar":"https://assets.leetcode-cn.com/aliyun-lc-upload/users/leetcode/avatar_1558372906.png","userSlug":"leetcode","realName":"\u529b\u6263\uff08LeetCode\uff09","__typename":"UserProfileNode"},"__typename":"PublicProfileNode"},"summary":"\u00a7 \u65b9\u6cd5\u4e00\uff1a\u66b4\u529b\u6cd5\n\u9898\u76ee\u66f4\u65b0\u540e\u7531\u4e8e\u65f6\u95f4\u9650\u5236\uff0c\u4f1a\u51fa\u73b0 TLE\u3002\n\u601d\u8def\n\u9010\u4e2a\u68c0\u67e5\u6240\u6709\u7684\u5b50\u5b57\u7b26\u4e32\uff0c\u770b\u5b83\u662f\u5426\u4e0d\u542b\u6709\u91cd\u590d\u7684\u5b57\u7b26\u3002\n\u7b97\u6cd5\n\u5047\u8bbe\u6211\u4eec\u6709\u4e00\u4e2a\u51fd\u6570 boolean allUnique(String substring) \uff0c\u5982\u679c\u5b50\u5b57\u7b26\u4e32\u4e2d\u7684\u5b57\u7b26\u90fd\u662f\u552f\u4e00\u7684\uff0c\u5b83\u4f1a\u8fd4\u56de true\uff0c\u5426\u5219\u4f1a\u8fd4\u56de false\u3002 \u6211\u4eec\u53ef\u4ee5\u904d\u5386\u7ed9\u5b9a\u5b57\u7b26\u4e32","topic":{"id":3516,"commentCount":4,"viewCount":7130,"__typename":"TopicNode"},"byLeetcode":true,"isMyFavorite":false,"isMostPopular":false,"isEditorsPick":false,"upvoteCount":29,"upvoted":false,"hitCount":102986,"__typename":"SolutionArticleNode","content":"#### \u65b9\u6cd5\u4e00\uff1a\u66b4\u529b\u6cd5\n\n__\u9898\u76ee\u66f4\u65b0\u540e\u7531\u4e8e\u65f6\u95f4\u9650\u5236\uff0c\u4f1a\u51fa\u73b0 TLE\u3002__\n\n**\u601d\u8def**\n\n\u9010\u4e2a\u68c0\u67e5\u6240\u6709\u7684\u5b50\u5b57\u7b26\u4e32\uff0c\u770b\u5b83\u662f\u5426\u4e0d\u542b\u6709\u91cd\u590d\u7684\u5b57\u7b26\u3002\n\n**\u7b97\u6cd5**\n\n\u5047\u8bbe\u6211\u4eec\u6709\u4e00\u4e2a\u51fd\u6570 `boolean allUnique(String substring)` \uff0c\u5982\u679c\u5b50\u5b57\u7b26\u4e32\u4e2d\u7684\u5b57\u7b26\u90fd\u662f\u552f\u4e00\u7684\uff0c\u5b83\u4f1a\u8fd4\u56de true\uff0c\u5426\u5219\u4f1a\u8fd4\u56de false\u3002 \u6211\u4eec\u53ef\u4ee5\u904d\u5386\u7ed9\u5b9a\u5b57\u7b26\u4e32 `s` \u7684\u6240\u6709\u53ef\u80fd\u7684\u5b50\u5b57\u7b26\u4e32\u5e76\u8c03\u7528\u51fd\u6570 `allUnique`\u3002 \u5982\u679c\u4e8b\u5b9e\u8bc1\u660e\u8fd4\u56de\u503c\u4e3a true\uff0c\u90a3\u4e48\u6211\u4eec\u5c06\u4f1a\u66f4\u65b0\u65e0\u91cd\u590d\u5b57\u7b26\u5b50\u4e32\u7684\u6700\u5927\u957f\u5ea6\u7684\u7b54\u6848\u3002\n\n\u73b0\u5728\u8ba9\u6211\u4eec\u586b\u8865\u7f3a\u5c11\u7684\u90e8\u5206\uff1a\n\n1. \u4e3a\u4e86\u679a\u4e3e\u7ed9\u5b9a\u5b57\u7b26\u4e32\u7684\u6240\u6709\u5b50\u5b57\u7b26\u4e32\uff0c\u6211\u4eec\u9700\u8981\u679a\u4e3e\u5b83\u4eec\u5f00\u59cb\u548c\u7ed3\u675f\u7684\u7d22\u5f15\u3002\u5047\u8bbe\u5f00\u59cb\u548c\u7ed3\u675f\u7684\u7d22\u5f15\u5206\u522b\u4e3a $i$ \u548c $j$\u3002\u90a3\u4e48\u6211\u4eec\u6709 $0 \\leq i \\lt j \\leq n$\uff08\u8fd9\u91cc\u7684\u7ed3\u675f\u7d22\u5f15 $j$ \u662f\u6309\u60ef\u4f8b\u6392\u9664\u7684\uff09\u3002\u56e0\u6b64\uff0c\u4f7f\u7528 $i$ \u4ece 0 \u5230 $n - 1$ \u4ee5\u53ca $j$ \u4ece $i+1$ \u5230 $n$ \u8fd9\u4e24\u4e2a\u5d4c\u5957\u7684\u5faa\u73af\uff0c\u6211\u4eec\u53ef\u4ee5\u679a\u4e3e\u51fa `s` \u7684\u6240\u6709\u5b50\u5b57\u7b26\u4e32\u3002\n\n2. \u8981\u68c0\u67e5\u4e00\u4e2a\u5b57\u7b26\u4e32\u662f\u5426\u6709\u91cd\u590d\u5b57\u7b26\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u96c6\u5408\u3002\u6211\u4eec\u904d\u5386\u5b57\u7b26\u4e32\u4e2d\u7684\u6240\u6709\u5b57\u7b26\uff0c\u5e76\u5c06\u5b83\u4eec\u9010\u4e2a\u653e\u5165 `set` \u4e2d\u3002\u5728\u653e\u7f6e\u4e00\u4e2a\u5b57\u7b26\u4e4b\u524d\uff0c\u6211\u4eec\u68c0\u67e5\u8be5\u96c6\u5408\u662f\u5426\u5df2\u7ecf\u5305\u542b\u5b83\u3002\u5982\u679c\u5305\u542b\uff0c\u6211\u4eec\u4f1a\u8fd4\u56de `false`\u3002\u5faa\u73af\u7ed3\u675f\u540e\uff0c\u6211\u4eec\u8fd4\u56de `true`\u3002\n\n```java [VuaaSJvY-Java]\npublic class Solution {\n    public int lengthOfLongestSubstring(String s) {\n        int n = s.length();\n        int ans = 0;\n        for (int i = 0; i < n; i++)\n            for (int j = i + 1; j <= n; j++)\n                if (allUnique(s, i, j)) ans = Math.max(ans, j - i);\n        return ans;\n    }\n\n    public boolean allUnique(String s, int start, int end) {\n        Set<Character> set = new HashSet<>();\n        for (int i = start; i < end; i++) {\n            Character ch = s.charAt(i);\n            if (set.contains(ch)) return false;\n            set.add(ch);\n        }\n        return true;\n    }\n}\n```\n\n\n**\u590d\u6742\u5ea6\u5206\u6790**\n\n* \u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(n^3)$ \u3002\n\n    \u8981\u9a8c\u8bc1\u7d22\u5f15\u8303\u56f4\u5728 $[i, j)$ \u5185\u7684\u5b57\u7b26\u662f\u5426\u90fd\u662f\u552f\u4e00\u7684\uff0c\u6211\u4eec\u9700\u8981\u68c0\u67e5\u8be5\u8303\u56f4\u4e2d\u7684\u6240\u6709\u5b57\u7b26\u3002 \u56e0\u6b64\uff0c\u5b83\u5c06\u82b1\u8d39 $O(j - i)$ \u7684\u65f6\u95f4\u3002\n\n    \u5bf9\u4e8e\u7ed9\u5b9a\u7684 `i`\uff0c\u5bf9\u4e8e\u6240\u6709 $j \\in [i+1, n]$ \u6240\u8017\u8d39\u7684\u65f6\u95f4\u603b\u548c\u4e3a\uff1a\n\n    $$\n    \\sum_{i+1}^{n}O(j - i)\n    $$\n\n    \u56e0\u6b64\uff0c\u6267\u884c\u6240\u6709\u6b65\u9aa4\u8017\u53bb\u7684\u65f6\u95f4\u603b\u548c\u4e3a\uff1a\n\n    $$\n    O\\left(\\sum_{i = 0}^{n - 1}\\left(\\sum_{j = i + 1}^{n}(j - i)\\right)\\right) =\n    O\\left(\\sum_{i = 0}^{n - 1}\\frac{(1 + n - i)(n - i)}{2}\\right) =\n    O(n^3)\n    $$\n\n* \u7a7a\u95f4\u590d\u6742\u5ea6\uff1a$O(min(n, m))$\uff0c\u6211\u4eec\u9700\u8981 $O(k)$ \u7684\u7a7a\u95f4\u6765\u68c0\u67e5\u5b50\u5b57\u7b26\u4e32\u4e2d\u662f\u5426\u6709\u91cd\u590d\u5b57\u7b26\uff0c\u5176\u4e2d $k$ \u8868\u793a `Set` \u7684\u5927\u5c0f\u3002\u800c Set \u7684\u5927\u5c0f\u53d6\u51b3\u4e8e\u5b57\u7b26\u4e32 $n$ \u7684\u5927\u5c0f\u4ee5\u53ca\u5b57\u7b26\u96c6/\u5b57\u6bcd $m$ \u7684\u5927\u5c0f\u3002\n\n\n---\n\n#### \u65b9\u6cd5\u4e8c\uff1a\u6ed1\u52a8\u7a97\u53e3\n\n**\u7b97\u6cd5**\n\n\u66b4\u529b\u6cd5\u975e\u5e38\u7b80\u5355\uff0c\u4f46\u5b83\u592a\u6162\u4e86\u3002\u90a3\u4e48\u6211\u4eec\u8be5\u5982\u4f55\u4f18\u5316\u5b83\u5462\uff1f\n\n\u5728\u66b4\u529b\u6cd5\u4e2d\uff0c\u6211\u4eec\u4f1a\u53cd\u590d\u68c0\u67e5\u4e00\u4e2a\u5b50\u5b57\u7b26\u4e32\u662f\u5426\u542b\u6709\u6709\u91cd\u590d\u7684\u5b57\u7b26\uff0c\u4f46\u8fd9\u662f\u6ca1\u6709\u5fc5\u8981\u7684\u3002\u5982\u679c\u4ece\u7d22\u5f15 $i$ \u5230 $j - 1$ \u4e4b\u95f4\u7684\u5b50\u5b57\u7b26\u4e32 $s_{ij}$ \u5df2\u7ecf\u88ab\u68c0\u67e5\u4e3a\u6ca1\u6709\u91cd\u590d\u5b57\u7b26\u3002\u6211\u4eec\u53ea\u9700\u8981\u68c0\u67e5 $s[j]$ \u5bf9\u5e94\u7684\u5b57\u7b26\u662f\u5426\u5df2\u7ecf\u5b58\u5728\u4e8e\u5b50\u5b57\u7b26\u4e32 $s_{ij}$ \u4e2d\u3002\n\n\u8981\u68c0\u67e5\u4e00\u4e2a\u5b57\u7b26\u662f\u5426\u5df2\u7ecf\u5728\u5b50\u5b57\u7b26\u4e32\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u68c0\u67e5\u6574\u4e2a\u5b50\u5b57\u7b26\u4e32\uff0c\u8fd9\u5c06\u4ea7\u751f\u4e00\u4e2a\u590d\u6742\u5ea6\u4e3a $O(n^2)$ \u7684\u7b97\u6cd5\uff0c\u4f46\u6211\u4eec\u53ef\u4ee5\u505a\u5f97\u66f4\u597d\u3002\n\n\u901a\u8fc7\u4f7f\u7528 HashSet \u4f5c\u4e3a\u6ed1\u52a8\u7a97\u53e3\uff0c\u6211\u4eec\u53ef\u4ee5\u7528 $O(1)$ \u7684\u65f6\u95f4\u6765\u5b8c\u6210\u5bf9\u5b57\u7b26\u662f\u5426\u5728\u5f53\u524d\u7684\u5b50\u5b57\u7b26\u4e32\u4e2d\u7684\u68c0\u67e5\u3002\n\n\u6ed1\u52a8\u7a97\u53e3\u662f\u6570\u7ec4/\u5b57\u7b26\u4e32\u95ee\u9898\u4e2d\u5e38\u7528\u7684\u62bd\u8c61\u6982\u5ff5\u3002 \u7a97\u53e3\u901a\u5e38\u662f\u5728\u6570\u7ec4/\u5b57\u7b26\u4e32\u4e2d\u7531\u5f00\u59cb\u548c\u7ed3\u675f\u7d22\u5f15\u5b9a\u4e49\u7684\u4e00\u7cfb\u5217\u5143\u7d20\u7684\u96c6\u5408\uff0c\u5373 $[i, j)$\uff08\u5de6\u95ed\uff0c\u53f3\u5f00\uff09\u3002\u800c\u6ed1\u52a8\u7a97\u53e3\u662f\u53ef\u4ee5\u5c06\u4e24\u4e2a\u8fb9\u754c\u5411\u67d0\u4e00\u65b9\u5411\u201c\u6ed1\u52a8\u201d\u7684\u7a97\u53e3\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u5c06 $[i, j)$ \u5411\u53f3\u6ed1\u52a8 $1$ \u4e2a\u5143\u7d20\uff0c\u5219\u5b83\u5c06\u53d8\u4e3a $[i+1, j+1)$\uff08\u5de6\u95ed\uff0c\u53f3\u5f00\uff09\u3002\n\n\u56de\u5230\u6211\u4eec\u7684\u95ee\u9898\uff0c\u6211\u4eec\u4f7f\u7528 HashSet \u5c06\u5b57\u7b26\u5b58\u50a8\u5728\u5f53\u524d\u7a97\u53e3 $[i, j)$\uff08\u6700\u521d $j = i$\uff09\u4e2d\u3002 \u7136\u540e\u6211\u4eec\u5411\u53f3\u4fa7\u6ed1\u52a8\u7d22\u5f15 $j$\uff0c\u5982\u679c\u5b83\u4e0d\u5728 HashSet \u4e2d\uff0c\u6211\u4eec\u4f1a\u7ee7\u7eed\u6ed1\u52a8 $j$\u3002\u76f4\u5230 s[j] \u5df2\u7ecf\u5b58\u5728\u4e8e HashSet \u4e2d\u3002\u6b64\u65f6\uff0c\u6211\u4eec\u627e\u5230\u7684\u6ca1\u6709\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u5b57\u7b26\u4e32\u5c06\u4f1a\u4ee5\u7d22\u5f15 $i$ \u5f00\u5934\u3002\u5982\u679c\u6211\u4eec\u5bf9\u6240\u6709\u7684 $i$ \u8fd9\u6837\u505a\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230\u7b54\u6848\u3002\n\n```java [QKqbsb5e-Java]\npublic class Solution {\n    public int lengthOfLongestSubstring(String s) {\n        int n = s.length();\n        Set<Character> set = new HashSet<>();\n        int ans = 0, i = 0, j = 0;\n        while (i < n && j < n) {\n            // try to extend the range [i, j]\n            if (!set.contains(s.charAt(j))){\n                set.add(s.charAt(j++));\n                ans = Math.max(ans, j - i);\n            }\n            else {\n                set.remove(s.charAt(i++));\n            }\n        }\n        return ans;\n    }\n}\n```\n\n\n**\u590d\u6742\u5ea6\u5206\u6790**\n\n* \u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(2n) = O(n)$\uff0c\u5728\u6700\u7cdf\u7cd5\u7684\u60c5\u51b5\u4e0b\uff0c\u6bcf\u4e2a\u5b57\u7b26\u5c06\u88ab $i$ \u548c $j$ \u8bbf\u95ee\u4e24\u6b21\u3002\n\n* \u7a7a\u95f4\u590d\u6742\u5ea6\uff1a$O(min(m, n))$\uff0c\u4e0e\u4e4b\u524d\u7684\u65b9\u6cd5\u76f8\u540c\u3002\u6ed1\u52a8\u7a97\u53e3\u6cd5\u9700\u8981 $O(k)$ \u7684\u7a7a\u95f4\uff0c\u5176\u4e2d $k$ \u8868\u793a `Set` \u7684\u5927\u5c0f\u3002\u800c Set \u7684\u5927\u5c0f\u53d6\u51b3\u4e8e\u5b57\u7b26\u4e32 $n$ \u7684\u5927\u5c0f\u4ee5\u53ca\u5b57\u7b26\u96c6 / \u5b57\u6bcd $m$ \u7684\u5927\u5c0f\u3002\n\n\n\n\n\n---\n\n#### \u65b9\u6cd5\u4e09\uff1a\u4f18\u5316\u7684\u6ed1\u52a8\u7a97\u53e3\n\n\u4e0a\u8ff0\u7684\u65b9\u6cd5\u6700\u591a\u9700\u8981\u6267\u884c 2n \u4e2a\u6b65\u9aa4\u3002\u4e8b\u5b9e\u4e0a\uff0c\u5b83\u53ef\u4ee5\u88ab\u8fdb\u4e00\u6b65\u4f18\u5316\u4e3a\u4ec5\u9700\u8981 n \u4e2a\u6b65\u9aa4\u3002\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u5b57\u7b26\u5230\u7d22\u5f15\u7684\u6620\u5c04\uff0c\u800c\u4e0d\u662f\u4f7f\u7528\u96c6\u5408\u6765\u5224\u65ad\u4e00\u4e2a\u5b57\u7b26\u662f\u5426\u5b58\u5728\u3002 \u5f53\u6211\u4eec\u627e\u5230\u91cd\u590d\u7684\u5b57\u7b26\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u7acb\u5373\u8df3\u8fc7\u8be5\u7a97\u53e3\u3002\n\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c $s[j]$ \u5728 $[i, j)$ \u8303\u56f4\u5185\u6709\u4e0e $j'$ \u91cd\u590d\u7684\u5b57\u7b26\uff0c\u6211\u4eec\u4e0d\u9700\u8981\u9010\u6e10\u589e\u52a0 $i$ \u3002 \u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u8df3\u8fc7 $[i\uff0cj']$ \u8303\u56f4\u5185\u7684\u6240\u6709\u5143\u7d20\uff0c\u5e76\u5c06 $i$ \u53d8\u4e3a $j' + 1$\u3002\n\n**Java\uff08\u4f7f\u7528 HashMap\uff09**\n\n```java [qjuXRDcC-Java]\npublic class Solution {\n    public int lengthOfLongestSubstring(String s) {\n        int n = s.length(), ans = 0;\n        Map<Character, Integer> map = new HashMap<>(); // current index of character\n        // try to extend the range [i, j]\n        for (int j = 0, i = 0; j < n; j++) {\n            if (map.containsKey(s.charAt(j))) {\n                i = Math.max(map.get(s.charAt(j)), i);\n            }\n            ans = Math.max(ans, j - i + 1);\n            map.put(s.charAt(j), j + 1);\n        }\n        return ans;\n    }\n}\n```\n\n\n**Java\uff08\u5047\u8bbe\u5b57\u7b26\u96c6\u4e3a ASCII 128\uff09**\n\n\u4ee5\u524d\u7684\u6211\u4eec\u90fd\u6ca1\u6709\u5bf9\u5b57\u7b26\u4e32 `s` \u6240\u4f7f\u7528\u7684\u5b57\u7b26\u96c6\u8fdb\u884c\u5047\u8bbe\u3002\n\n\u5f53\u6211\u4eec\u77e5\u9053\u8be5\u5b57\u7b26\u96c6\u6bd4\u8f83\u5c0f\u7684\u65f6\u4faf\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\u4f5c\u4e3a\u76f4\u63a5\u8bbf\u95ee\u8868\u6765\u66ff\u6362 `Map`\u3002\n\n\u5e38\u7528\u7684\u8868\u5982\u4e0b\u6240\u793a\uff1a\n\n* `int [26]` \u7528\u4e8e\u5b57\u6bcd \u2018a\u2019 - \u2018z\u2019 \u6216 \u2018A\u2019 - \u2018Z\u2019\n* `int [128]` \u7528\u4e8eASCII\u7801\n* `int [256]` \u7528\u4e8e\u6269\u5c55ASCII\u7801\n\n```java [Rc2veozY-Java]\npublic class Solution {\n    public int lengthOfLongestSubstring(String s) {\n        int n = s.length(), ans = 0;\n        int[] index = new int[128]; // current index of character\n        // try to extend the range [i, j]\n        for (int j = 0, i = 0; j < n; j++) {\n            i = Math.max(index[s.charAt(j)], i);\n            ans = Math.max(ans, j - i + 1);\n            index[s.charAt(j)] = j + 1;\n        }\n        return ans;\n    }\n}\n```\n\n\n**\u590d\u6742\u5ea6\u5206\u6790**\n\n* \u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(n)$\uff0c\u7d22\u5f15 $j$ \u5c06\u4f1a\u8fed\u4ee3 $n$ \u6b21\u3002\n\n* \u7a7a\u95f4\u590d\u6742\u5ea6\uff08HashMap\uff09\uff1a$O(min(m, n))$\uff0c\u4e0e\u4e4b\u524d\u7684\u65b9\u6cd5\u76f8\u540c\u3002\n\n* \u7a7a\u95f4\u590d\u6742\u5ea6\uff08Table\uff09\uff1a$O(m)$\uff0c$m$ \u662f\u5b57\u7b26\u96c6\u7684\u5927\u5c0f\u3002"}}}