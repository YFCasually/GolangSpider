{"data":{"question":{"questionId":"736","questionFrontendId":"736","boundTopicId":1832,"title":"Parse Lisp Expression","titleSlug":"parse-lisp-expression","content":"<p>\r\nYou are given a string <code>expression</code> representing a Lisp-like expression to return the integer value of.\r\n</p><p>\r\nThe syntax for these expressions is given as follows.\r\n</p><p>\r\n<li>An expression is either an integer, a let-expression, an add-expression, a mult-expression, or an assigned variable.  Expressions always evaluate to a single integer.</li>\r\n</p><p>\r\n<li>(An integer could be positive or negative.)</li>\r\n</p><p>\r\n<li>A let-expression takes the form <code>(let v1 e1 v2 e2 ... vn en expr)</code>, where <code>let</code> is always the string <code>\"let\"</code>, then there are 1 or more pairs of alternating variables and expressions, meaning that the first variable <code>v1</code> is assigned the value of the expression <code>e1</code>, the second variable <code>v2</code> is assigned the value of the expression <code>e2</code>, and so on <b>sequentially</b>; and then the value of this let-expression is the value of the expression <code>expr</code>.</li>\r\n</p><p>\r\n<li>An add-expression takes the form <code>(add e1 e2)</code> where <code>add</code> is always the string <code>\"add\"</code>, there are always two expressions <code>e1, e2</code>, and this expression evaluates to the addition of the evaluation of <code>e1</code> and the evaluation of <code>e2</code>.</li>\r\n</p><p>\r\n<li>A mult-expression takes the form <code>(mult e1 e2)</code> where <code>mult</code> is always the string <code>\"mult\"</code>, there are always two expressions <code>e1, e2</code>, and this expression evaluates to the multiplication of the evaluation of <code>e1</code> and the evaluation of <code>e2</code>.</li>\r\n</p><p>\r\n<li>For the purposes of this question, we will use a smaller subset of variable names.  A variable starts with a lowercase letter, then zero or more lowercase letters or digits.  Additionally for your convenience, the names \"add\", \"let\", or \"mult\" are protected and will never be used as variable names.</li>\r\n</p><p>\r\n<li>Finally, there is the concept of scope.  When an expression of a variable name is evaluated, <b>within the context of that evaluation</b>, the innermost scope (in terms of parentheses) is checked first for the value of that variable, and then outer scopes are checked sequentially.  It is guaranteed that every expression is legal.  Please see the examples for more details on scope.</li>\r\n</p>\r\n\r\n<p><b>Evaluation Examples:</b><br />\r\n<pre>\r\n<b>Input:</b> (add 1 2)\r\n<b>Output:</b> 3\r\n\r\n<b>Input:</b> (mult 3 (add 2 3))\r\n<b>Output:</b> 15\r\n\r\n<b>Input:</b> (let x 2 (mult x 5))\r\n<b>Output:</b> 10\r\n\r\n<b>Input:</b> (let x 2 (mult x (let x 3 y 4 (add x y))))\r\n<b>Output:</b> 14\r\n<b>Explanation:</b> In the expression (add x y), when checking for the value of the variable x,\r\nwe check from the innermost scope to the outermost in the context of the variable we are trying to evaluate.\r\nSince x = 3 is found first, the value of x is 3.\r\n\r\n<b>Input:</b> (let x 3 x 2 x)\r\n<b>Output:</b> 2\r\n<b>Explanation:</b> Assignment in let statements is processed sequentially.\r\n\r\n<b>Input:</b> (let x 1 y 2 x (add x y) (add x y))\r\n<b>Output:</b> 5\r\n<b>Explanation:</b> The first (add x y) evaluates as 3, and is assigned to x.\r\nThe second (add x y) evaluates as 3+2 = 5.\r\n\r\n<b>Input:</b> (let x 2 (add (let x 3 (let x 4 x)) x))\r\n<b>Output:</b> 6\r\n<b>Explanation:</b> Even though (let x 4 x) has a deeper scope, it is outside the context\r\nof the final x in the add-expression.  That final x will equal 2.\r\n\r\n<b>Input:</b> (let a1 3 b2 (add a1 1) b2) \r\n<b>Output</b> 4\r\n<b>Explanation:</b> Variable names can contain digits after the first character.\r\n\r\n</pre>\r\n\r\n<p><b>Note:</b>\r\n<li>The given string <code>expression</code> is well formatted: There are no leading or trailing spaces, there is only a single space separating different components of the string, and no space between adjacent parentheses.  The expression is guaranteed to be legal and evaluate to an integer.</li>\r\n<li>The length of <code>expression</code> is at most 2000.  (It is also non-empty, as that would not be a legal expression.)</li>\r\n<li>The answer and all intermediate calculations of that answer are guaranteed to fit in a 32-bit integer.</li>\r\n</p>","translatedTitle":"Lisp \u8bed\u6cd5\u89e3\u6790","translatedContent":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u7c7b\u4f3c Lisp \u8bed\u53e5\u7684\u8868\u8fbe\u5f0f <code>expression</code>\uff0c\u6c42\u51fa\u5176\u8ba1\u7b97\u7ed3\u679c\u3002</p>\n\n<p>\u8868\u8fbe\u5f0f\u8bed\u6cd5\u5982\u4e0b\u6240\u793a:</p>\n\n<ul>\n\t<li>\u8868\u8fbe\u5f0f\u53ef\u4ee5\u4e3a\u6574\u6570\uff0clet \u8bed\u6cd5\uff0cadd \u8bed\u6cd5\uff0cmult \u8bed\u6cd5\u3002\u8868\u8fbe\u5f0f\u7684\u7ed3\u679c\u603b\u662f\u4e00\u4e2a\u6574\u6570\u3002</li>\n\t<li>(\u6574\u6570\u53ef\u4ee5\u662f\u6b63\u6574\u6570\u3001\u8d1f\u6574\u6570\u30010)</li>\n\t<li>let \u8bed\u6cd5\u8868\u793a\u4e3a&nbsp;<code>(let v1 e1 v2 e2 ... vn en expr)</code>,&nbsp;\u5176\u4e2d&nbsp;<code>let</code>\u8bed\u6cd5\u603b\u662f\u4ee5\u5b57\u7b26\u4e32&nbsp;<code>&quot;let&quot;</code>\u6765\u8868\u793a\uff0c\u63a5\u4e0b\u6765\u4f1a\u8ddf\u968f\u4e00\u4e2a\u6216\u591a\u4e2a\u4ea4\u66ff\u53d8\u91cf\u6216\u8868\u8fbe\u5f0f\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u7b2c\u4e00\u4e2a\u53d8\u91cf&nbsp;<code>v1</code>\u88ab\u5206\u914d\u4e3a\u8868\u8fbe\u5f0f&nbsp;<code>e1</code>&nbsp;\u7684\u503c\uff0c\u7b2c\u4e8c\u4e2a\u53d8\u91cf&nbsp;<code>v2</code>&nbsp;\u88ab\u5206\u914d\u4e3a\u8868\u8fbe\u5f0f&nbsp;<code>e2</code>&nbsp;\u7684\u503c\uff0c<strong>\u4ee5\u6b64\u7c7b\u63a8</strong>\uff1b\u6700\u7ec8 let \u8bed\u6cd5\u7684\u503c\u4e3a&nbsp;<code>expr</code>\u8868\u8fbe\u5f0f\u7684\u503c\u3002</li>\n\t<li>add\u8bed\u6cd5\u8868\u793a\u4e3a&nbsp;<code>(add e1 e2)</code>\uff0c\u5176\u4e2d&nbsp;<code>add</code>&nbsp;\u8bed\u6cd5\u603b\u662f\u4ee5\u5b57\u7b26\u4e32&nbsp;<code>&quot;add&quot;</code>\u6765\u8868\u793a\uff0c\u8be5\u8bed\u6cd5\u603b\u662f\u6709\u4e24\u4e2a\u8868\u8fbe\u5f0f<code>e1</code><font color=\"#333333\" face=\"Helvetica Neue, Helvetica, Arial, sans-serif\"><span style=\"background-color:#ffffff; font-size:14px\">\u3001</span></font><code>e2</code>, \u8be5\u8bed\u6cd5\u7684\u6700\u7ec8\u7ed3\u679c\u662f&nbsp;<code>e1</code> \u8868\u8fbe\u5f0f\u7684\u503c\u4e0e&nbsp;<code>e2</code>&nbsp;\u8868\u8fbe\u5f0f\u7684\u503c\u4e4b<strong>\u548c</strong>\u3002</li>\n\t<li>mult\u8bed\u6cd5\u8868\u793a\u4e3a&nbsp;<code>(mult e1 e2)</code>&nbsp;\uff0c\u5176\u4e2d&nbsp;<code>mult</code>&nbsp;\u8bed\u6cd5\u603b\u662f\u4ee5\u5b57\u7b26\u4e32<code>&quot;mult&quot;</code>\u8868\u793a\uff0c \u8be5\u8bed\u6cd5\u603b\u662f\u6709\u4e24\u4e2a\u8868\u8fbe\u5f0f <code>e1</code>\u3001<code>e2</code>\uff0c\u8be5\u8bed\u6cd5\u7684\u6700\u7ec8\u7ed3\u679c\u662f&nbsp;<code>e1</code> \u8868\u8fbe\u5f0f\u7684\u503c\u4e0e&nbsp;<code>e2</code>&nbsp;\u8868\u8fbe\u5f0f\u7684\u503c\u4e4b<strong>\u79ef</strong>\u3002</li>\n\t<li>\u5728\u8be5\u9898\u76ee\u4e2d\uff0c\u53d8\u91cf\u7684\u547d\u540d\u4ee5\u5c0f\u5199\u5b57\u7b26\u5f00\u59cb\uff0c\u4e4b\u540e\u8ddf\u968f0\u4e2a\u6216\u591a\u4e2a\u5c0f\u5199\u5b57\u7b26\u6216\u6570\u5b57\u3002\u4e3a\u4e86\u65b9\u4fbf\uff0c&quot;add&quot;\uff0c&quot;let&quot;\uff0c&quot;mult&quot;\u4f1a\u88ab\u5b9a\u4e49\u4e3a&quot;\u5173\u952e\u5b57&quot;\uff0c\u4e0d\u4f1a\u5728\u8868\u8fbe\u5f0f\u7684\u53d8\u91cf\u547d\u540d\u4e2d\u51fa\u73b0\u3002</li>\n\t<li>\u6700\u540e\uff0c\u8981\u8bf4\u4e00\u4e0b\u8303\u56f4\u7684\u6982\u5ff5\u3002\u5728\u505a\u8ba1\u7b97\u65f6\uff0c<strong>\u9700\u8981\u6ce8\u610f\u4f18\u5148\u7ea7</strong>\uff0c\u5728\u6700\u5185\u5c42(\u6839\u636e\u62ec\u53f7)\u7684\u8868\u8fbe\u5f0f\u7684\u503c\u5e94\u8be5\u5148\u8ba1\u7b97,\u7136\u540e\u4f9d\u6b21\u8ba1\u7b97\u5916\u5c42\u7684\u8868\u8fbe\u5f0f\u3002\u6211\u4eec\u5c06\u4fdd\u8bc1\u6bcf\u4e00\u4e2a\u6d4b\u8bd5\u7684\u8868\u8fbe\u5f0f\u90fd\u662f\u5408\u6cd5\u7684\u3002\u6709\u5173\u8303\u56f4\u7684\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u793a\u4f8b\u3002</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> (add 1 2)\n<strong>\u8f93\u51fa:</strong> 3\n\n<strong>\u8f93\u5165:</strong> (mult 3 (add 2 3))\n<strong>\u8f93\u51fa:</strong> 15\n\n<strong>\u8f93\u5165:</strong> (let x 2 (mult x 5))\n<strong>\u8f93\u51fa:</strong> 10\n\n<strong>\u8f93\u5165:</strong> (let x 2 (mult x (let x 3 y 4 (add x y))))\n<strong>\u8f93\u51fa:</strong> 14\n<strong>\u89e3\u91ca:</strong> \n\u8868\u8fbe\u5f0f (add x y), \u5728\u83b7\u53d6 x \u503c\u65f6, \u6211\u4eec\u5e94\u5f53\u7531\u6700\u5185\u5c42\u4f9d\u6b21\u5411\u5916\u8ba1\u7b97, \u9996\u5148\u9047\u5230\u4e86 x=3, \u6240\u4ee5\u6b64\u5904\u7684 x \u503c\u662f 3.\n\n\n<strong>\u8f93\u5165:</strong> (let x 3 x 2 x)\n<strong>\u8f93\u51fa:</strong> 2\n<strong>\u89e3\u91ca:</strong> let \u8bed\u53e5\u4e2d\u7684\u8d4b\u503c\u8fd0\u7b97\u6309\u987a\u5e8f\u5904\u7406\u5373\u53ef\n\n<strong>\u8f93\u5165:</strong> (let x 1 y 2 x (add x y) (add x y))\n<strong>\u8f93\u51fa:</strong> 5\n<strong>\u89e3\u91ca:</strong> \n\u7b2c\u4e00\u4e2a (add x y) \u8ba1\u7b97\u7ed3\u679c\u662f 3\uff0c\u5e76\u4e14\u5c06\u6b64\u503c\u8d4b\u7ed9\u4e86 x \u3002\n\u7b2c\u4e8c\u4e2a (add x y) \u8ba1\u7b97\u7ed3\u679c\u5c31\u662f 3+2 = 5 \u3002\n\n<strong>\u8f93\u5165:</strong> (let x 2 (add (let x 3 (let x 4 x)) x))\n<strong>\u8f93\u51fa:</strong> 6\n<strong>\u89e3\u91ca:</strong> \n(let x 4 x) \u4e2d\u7684 x \u7684\u4f5c\u7528\u8303\u56f4\u4ec5\u5728()\u4e4b\u5185\u3002\u6240\u4ee5\u6700\u7ec8\u505a\u52a0\u6cd5\u64cd\u4f5c\u65f6\uff0cx \u7684\u503c\u662f 2 \u3002\n\n<strong>\u8f93\u5165:</strong> (let a1 3 b2 (add a1 1) b2) \n<strong>\u8f93\u51fa: </strong>4\n<strong>\u89e3\u91ca:</strong> \n\u53d8\u91cf\u547d\u540d\u65f6\u53ef\u4ee5\u5728\u7b2c\u4e00\u4e2a\u5c0f\u5199\u5b57\u6bcd\u540e\u8ddf\u968f\u6570\u5b57.\n\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ul>\n\t<li>\u6211\u4eec\u7ed9\u5b9a\u7684&nbsp;<code>expression</code>&nbsp;\u8868\u8fbe\u5f0f\u90fd\u662f\u683c\u5f0f\u5316\u540e\u7684\uff1a\u8868\u8fbe\u5f0f\u524d\u540e\u6ca1\u6709\u591a\u4f59\u7684\u7a7a\u683c\uff0c\u8868\u8fbe\u5f0f\u7684\u4e0d\u540c\u90e8\u5206(\u5173\u952e\u5b57\u3001\u53d8\u91cf\u3001\u8868\u8fbe\u5f0f)\u4e4b\u95f4\u4ec5\u4f7f\u7528\u4e00\u4e2a\u7a7a\u683c\u5206\u5272\uff0c\u5e76\u4e14\u5728\u76f8\u90bb\u62ec\u53f7\u4e4b\u95f4\u4e5f\u6ca1\u6709\u7a7a\u683c\u3002\u6211\u4eec\u7ed9\u5b9a\u7684\u8868\u8fbe\u5f0f\u5747\u4e3a\u5408\u6cd5\u7684\u4e14\u6700\u7ec8\u7ed3\u679c\u4e3a\u6574\u6570\u3002</li>\n\t<li>\u6211\u4eec\u7ed9\u5b9a\u7684\u8868\u8fbe\u5f0f\u957f\u5ea6\u6700\u591a\u4e3a 2000&nbsp;(\u8868\u8fbe\u5f0f\u4e5f\u4e0d\u4f1a\u4e3a\u7a7a\uff0c\u56e0\u4e3a\u90a3\u4e0d\u662f\u4e00\u4e2a\u5408\u6cd5\u7684\u8868\u8fbe\u5f0f)\u3002</li>\n\t<li>\u6700\u7ec8\u7684\u7ed3\u679c\u548c\u4e2d\u95f4\u7684\u8ba1\u7b97\u7ed3\u679c\u90fd\u5c06\u662f\u4e00\u4e2a 32 \u4f4d\u6574\u6570\u3002</li>\n</ul>\n\n<p>&nbsp;</p>\n","isPaidOnly":false,"difficulty":"Hard","likes":6,"dislikes":0,"isLiked":null,"similarQuestions":"[{\"title\": \"Ternary Expression Parser\", \"titleSlug\": \"ternary-expression-parser\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u4e09\\u5143\\u8868\\u8fbe\\u5f0f\\u89e3\\u6790\\u5668\"}, {\"title\": \"Number of Atoms\", \"titleSlug\": \"number-of-atoms\", \"difficulty\": \"Hard\", \"translatedTitle\": \"\\u539f\\u5b50\\u7684\\u6570\\u91cf\"}, {\"title\": \"Basic Calculator IV\", \"titleSlug\": \"basic-calculator-iv\", \"difficulty\": \"Hard\", \"translatedTitle\": \"\\u57fa\\u672c\\u8ba1\\u7b97\\u5668 IV\"}]","contributors":[],"langToValidPlayground":"{\"cpp\": true, \"java\": true, \"python\": true, \"python3\": true, \"mysql\": false, \"mssql\": false, \"oraclesql\": false, \"c\": false, \"csharp\": false, \"javascript\": false, \"ruby\": false, \"bash\": false, \"swift\": false, \"golang\": false, \"scala\": false, \"html\": false, \"pythonml\": false, \"kotlin\": false, \"rust\": false, \"php\": false}","topicTags":[{"name":"String","slug":"string","translatedName":"\u5b57\u7b26\u4e32","__typename":"TopicTagNode"}],"companyTagStats":null,"codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    int evaluate(string expression) {\n        \n    }\n};","__typename":"CodeSnippetNode"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public int evaluate(String expression) {\n        \n    }\n}","__typename":"CodeSnippetNode"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def evaluate(self, expression):\n        \"\"\"\n        :type expression: str\n        :rtype: int\n        \"\"\"\n        ","__typename":"CodeSnippetNode"},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def evaluate(self, expression: str) -> int:\n        ","__typename":"CodeSnippetNode"},{"lang":"C","langSlug":"c","code":"\n\nint evaluate(char * expression){\n\n}\n\n","__typename":"CodeSnippetNode"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public int Evaluate(string expression) {\n        \n    }\n}","__typename":"CodeSnippetNode"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {string} expression\n * @return {number}\n */\nvar evaluate = function(expression) {\n    \n};","__typename":"CodeSnippetNode"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {String} expression\n# @return {Integer}\ndef evaluate(expression)\n    \nend","__typename":"CodeSnippetNode"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func evaluate(_ expression: String) -> Int {\n        \n    }\n}","__typename":"CodeSnippetNode"},{"lang":"Go","langSlug":"golang","code":"func evaluate(expression string) int {\n    \n}","__typename":"CodeSnippetNode"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def evaluate(expression: String): Int = {\n        \n    }\n}","__typename":"CodeSnippetNode"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun evaluate(expression: String): Int {\n        \n    }\n}","__typename":"CodeSnippetNode"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn evaluate(expression: String) -> i32 {\n        \n    }\n}","__typename":"CodeSnippetNode"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param String $expression\n     * @return Integer\n     */\n    function evaluate($expression) {\n        \n    }\n}","__typename":"CodeSnippetNode"}],"stats":"{\"totalAccepted\": \"126\", \"totalSubmission\": \"305\", \"totalAcceptedRaw\": 126, \"totalSubmissionRaw\": 305, \"acRate\": \"41.3%\"}","hints":["* If the expression starts with a digit or '-', it's an integer: return it.\r\n\r\n* If the expression starts with a letter, it's a variable.  Recall it by checking the current scope in reverse order.\r\n\r\n* Otherwise, group the tokens (variables or expressions) within this expression by counting the \"balance\" `bal` of the occurrences of `'('` minus the number of occurrences of `')'`.  When the balance is zero, we have ended a token.  For example, `(add 1 (add 2 3))` should have tokens `'1'` and `'(add 2 3)'`.\r\n\r\n* For add and mult expressions, evaluate each token and return the addition or multiplication of them.\r\n\r\n* For let expressions, evaluate each expression sequentially and assign it to the variable in the current scope, then return the evaluation of the final expression."],"solution":null,"status":null,"sampleTestCase":"\"(add 1 2)\"","metaData":"{\r\n  \"name\": \"evaluate\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"expression\",\r\n      \"type\": \"string\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}","judgerAvailable":true,"judgeType":"large","mysqlSchemas":[],"enableRunCode":true,"enableTestMode":false,"envInfo":"{\"cpp\": [\"C++\", \"<p>\\u7248\\u672c\\uff1a<code>g++ 6.3</code> \\u91c7\\u7528\\u6700\\u65b0C++ 14\\u6807\\u51c6\\u3002</p>\\r\\n\\r\\n<p>\\u7f16\\u8bd1\\u65f6\\uff0c\\u5c06\\u4f1a\\u91c7\\u7528<code>-O1</code>\\u7ea7\\u4f18\\u5316\\u3002<a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> \\u4e5f\\u88ab\\u5f00\\u542f\\u6765\\u68c0\\u6d4b<code>out-of-bounds</code>\\u548c<code>use-after-free</code>\\u9519\\u8bef\\u3002</p>\\r\\n\\r\\n<p>\\u4e3a\\u4e86\\u4f7f\\u7528\\u65b9\\u4fbf\\uff0c\\u5927\\u90e8\\u5206\\u6807\\u51c6\\u5e93\\u7684\\u5934\\u6587\\u4ef6\\u5df2\\u7ecf\\u88ab\\u81ea\\u52a8\\u5bfc\\u5165\\u3002</p>\"], \"java\": [\"Java\", \"<p>\\u7248\\u672c\\uff1a<code>Java 1.8.0</code>\\u3002\\u53ef\\u4ee5\\u4f7f\\u7528Java 8\\u7684\\u7279\\u6027\\u4f8b\\u5982\\uff0clambda expressions \\u548c stream API\\u3002</p>\\r\\n\\r\\n<p>\\u4e3a\\u4e86\\u65b9\\u4fbf\\u8d77\\u89c1\\uff0c\\u5927\\u90e8\\u5206\\u6807\\u51c6\\u5e93\\u7684\\u5934\\u6587\\u4ef6\\u5df2\\u88ab\\u5bfc\\u5165\\u3002</p>\"], \"python\": [\"Python\", \"<p>\\u7248\\u672c\\uff1a <code>Python 2.7.12</code></p>\\r\\n\\r\\n<p>\\u4e3a\\u4e86\\u65b9\\u4fbf\\u8d77\\u89c1\\uff0c\\u5927\\u90e8\\u5206\\u5e38\\u7528\\u5e93\\u5df2\\u7ecf\\u88ab\\u81ea\\u52a8 \\u5bfc\\u5165\\uff0c\\u5982\\uff1a<a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>\\u3002\\u5982\\u679c\\u60a8\\u9700\\u8981\\u4f7f\\u7528\\u5176\\u4ed6\\u5e93\\u51fd\\u6570\\uff0c\\u8bf7\\u81ea\\u884c\\u5bfc\\u5165\\u3002</p>\\r\\n\\r\\n<p>\\u6ce8\\u610f Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">\\u5c06\\u57282020\\u5e74\\u540e\\u4e0d\\u518d\\u7ef4\\u62a4</a>\\u3002 \\u5982\\u60f3\\u4f7f\\u7528\\u6700\\u65b0\\u7248\\u7684Python\\uff0c\\u8bf7\\u9009\\u62e9Python 3\\u3002</p>\"], \"c\": [\"C\", \"<p>\\u7248\\u672c\\uff1a<code>GCC 6.3</code>\\uff0c\\u91c7\\u7528GNU99\\u6807\\u51c6\\u3002</p>\\r\\n\\r\\n<p>\\u7f16\\u8bd1\\u65f6\\uff0c\\u5c06\\u4f1a\\u91c7\\u7528<code>-O1</code>\\u7ea7\\u4f18\\u5316\\u3002 <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a>\\u4e5f\\u88ab\\u5f00\\u542f\\u6765\\u68c0\\u6d4b<code>out-of-bounds</code>\\u548c<code>use-after-free</code>\\u9519\\u8bef\\u3002</p>\\r\\n\\r\\n<p>\\u4e3a\\u4e86\\u4f7f\\u7528\\u65b9\\u4fbf\\uff0c\\u5927\\u90e8\\u5206\\u6807\\u51c6\\u5e93\\u7684\\u5934\\u6587\\u4ef6\\u5df2\\u7ecf\\u88ab\\u81ea\\u52a8\\u5bfc\\u5165\\u3002</p>\\r\\n\\r\\n<p>\\u5982\\u60f3\\u4f7f\\u7528\\u54c8\\u5e0c\\u8868\\u8fd0\\u7b97, \\u60a8\\u53ef\\u4ee5\\u4f7f\\u7528 <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>\\u3002 \\\"uthash.h\\\"\\u5df2\\u7ecf\\u9ed8\\u8ba4\\u88ab\\u5bfc\\u5165\\u3002\\u8bf7\\u770b\\u5982\\u4e0b\\u793a\\u4f8b:</p>\\r\\n\\r\\n<p><b>1. \\u5f80\\u54c8\\u5e0c\\u8868\\u4e2d\\u6dfb\\u52a0\\u4e00\\u4e2a\\u5bf9\\u8c61\\uff1a</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. \\u5728\\u54c8\\u5e0c\\u8868\\u4e2d\\u67e5\\u627e\\u4e00\\u4e2a\\u5bf9\\u8c61\\uff1a</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. \\u4ece\\u54c8\\u5e0c\\u8868\\u4e2d\\u5220\\u9664\\u4e00\\u4e2a\\u5bf9\\u8c61\\uff1a</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><code>Mono 5.12.0</code>\\u63d0\\u4f9b\\u4e86<a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-7\\\" target=\\\"_blank\\\">\\u5bf9C# 7\\u7684\\u5168\\u9762\\u652f\\u6301</a>\\u3002</p>\\r\\n\\r\\n<p>\\u60a8\\u7684\\u4ee3\\u7801\\u5728\\u7f16\\u8bd1\\u65f6\\u9ed8\\u8ba4\\u5f00\\u542f\\u4e86debug\\u6807\\u8bb0(<code>/debug</code>)\\u3002</p>\"], \"javascript\": [\"JavaScript\", \"<p>\\u7248\\u672c\\uff1a<code>Nodejs 10.15.0</code></p>\\r\\n\\r\\n<p>\\u60a8\\u7684\\u4ee3\\u7801\\u5728\\u6267\\u884c\\u65f6\\u5c06\\u5e26\\u4e0a <code>--harmony</code> \\u6807\\u8bb0\\u6765\\u5f00\\u542f <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">\\u65b0\\u7248ES6\\u7279\\u6027</a>\\u3002</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> \\u5e93\\u5df2\\u7ecf\\u9ed8\\u8ba4\\u88ab\\u5305\\u542b\\u3002</p>\"], \"ruby\": [\"Ruby\", \"<p>\\u4f7f\\u7528<code>Ruby 2.4.1</code>\\u6267\\u884c</p>\"], \"swift\": [\"Swift\", \"<p>\\u7248\\u672c\\uff1a<code>Swift 4.2</code></p>\\r\\n\\r\\n<p>\\u6211\\u4eec\\u901a\\u5e38\\u4fdd\\u8bc1\\u66f4\\u65b0\\u5230 <a href=\\\"https://swift.org/download/\\\" target=\\\"_blank\\\">Apple\\u653e\\u51fa\\u7684\\u6700\\u65b0\\u7248Swift</a>\\u3002\\u5982\\u679c\\u60a8\\u53d1\\u73b0Swift\\u4e0d\\u662f\\u6700\\u65b0\\u7248\\u7684\\uff0c\\u8bf7\\u8054\\u7cfb\\u6211\\u4eec\\uff01\\u6211\\u4eec\\u5c06\\u5c3d\\u5feb\\u66f4\\u65b0\\u3002</p>\"], \"golang\": [\"Go\", \"<p>\\u7248\\u672c\\uff1a<code>Go 1.10.3</code></p>\"], \"python3\": [\"Python3\", \"<p>\\u7248\\u672c\\uff1a<code>Python 3.6</code></p>\\r\\n\\r\\n<p>\\u4e3a\\u4e86\\u65b9\\u4fbf\\u8d77\\u89c1\\uff0c\\u5927\\u90e8\\u5206\\u5e38\\u7528\\u5e93\\u5df2\\u7ecf\\u88ab\\u81ea\\u52a8 \\u5bfc\\u5165\\uff0c\\u5982<a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>\\u3002 \\u5982\\u679c\\u60a8\\u9700\\u8981\\u4f7f\\u7528\\u5176\\u4ed6\\u5e93\\u51fd\\u6570\\uff0c\\u8bf7\\u81ea\\u884c\\u5bfc\\u5165\\u3002</p>\"], \"scala\": [\"Scala\", \"<p>\\u7248\\u672c\\uff1a<code>Scala 2.11.6</code></p>\"], \"kotlin\": [\"Kotlin\", \"<p>\\u7248\\u672c\\uff1a<code>Kotlin 1.2.50</code></p>\"], \"rust\": [\"Rust\", \"<p>\\u7248\\u672c\\uff1a<code>rust 1.31.0 (edition = 2018)</code></p>\\r\\n\\r\\n<p>\\u652f\\u6301 crates.io \\u7684 <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand</a></p>\"], \"php\": [\"PHP\", \"<p>Run with <code>PHP 7.2</code>.</p>\"]}","__typename":"QuestionNode"}}}