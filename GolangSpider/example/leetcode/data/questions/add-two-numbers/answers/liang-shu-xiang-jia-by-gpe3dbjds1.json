{
  "data": {
    "solutionArticle": {
      "title": "\u4e24\u6570\u76f8\u52a0",
      "slug": "liang-shu-xiang-jia-by-gpe3dbjds1",
      "reactedType": null,
      "status": "PUBLISHED",
      "identifier": "liang-shu-xiang-jia-by-gpe3dbjds1",
      "canEdit": false,
      "reactions": [
        {
          "count": 5,
          "reactionType": "AWESOME",
          "__typename": "ArticleReactionCountNode"
        },
        {
          "count": 2,
          "reactionType": "GOOD",
          "__typename": "ArticleReactionCountNode"
        },
        {
          "count": 0,
          "reactionType": "CONFUSED",
          "__typename": "ArticleReactionCountNode"
        }
      ],
      "tags": [
        {
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "__typename": "ArticleTagNode"
        }
      ],
      "createdAt": "2019-05-10T03:08:39.099538+00:00",
      "thumbnail": "",
      "author": {
        "username": "gpe3DBjDS1",
        "profile": {
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/gpe3DBjDS1/avatar_1553130615.png",
          "userSlug": "gpe3DBjDS1",
          "realName": "\u9648\u4e50\u4e50",
          "__typename": "UserProfileNode"
        },
        "__typename": "PublicProfileNode"
      },
      "summary": "\u7ed9\u51fa\u4e24\u4e2a \u975e\u7a7a \u7684\u94fe\u8868\u7528\u6765\u8868\u793a\u4e24\u4e2a\u975e\u8d1f\u7684\u6574\u6570\u3002\u5176\u4e2d\uff0c\u5b83\u4eec\u5404\u81ea\u7684\u4f4d\u6570\u662f\u6309\u7167 \u9006\u5e8f \u7684\u65b9\u5f0f\u5b58\u50a8\u7684\uff0c\u5e76\u4e14\u5b83\u4eec\u7684\u6bcf\u4e2a\u8282\u70b9\u53ea\u80fd\u5b58\u50a8 \u4e00\u4f4d \u6570\u5b57\u3002\n\u5982\u679c\uff0c\u6211\u4eec\u5c06\u8fd9\u4e24\u4e2a\u6570\u76f8\u52a0\u8d77\u6765\uff0c\u5219\u4f1a\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u94fe\u8868\u6765\u8868\u793a\u5b83\u4eec\u7684\u548c\u3002\n\u60a8\u53ef\u4ee5\u5047\u8bbe\u9664\u4e86\u6570\u5b57 0 \u4e4b\u5916\uff0c\u8fd9\u4e24\u4e2a\u6570\u90fd\u4e0d\u4f1a\u4ee5 0 \u5f00\u5934\u3002\n\u793a\u4f8b\uff1a\n\u5c06\u957f\u5ea6\u8f83\u77ed\u7684\u94fe\u8868\u5728\u672b\u5c3e\u8865\u96f6\u4f7f\u5f97\u4e24\u4e2a\u8fde\u8868\u957f\u5ea6\u76f8\u7b49\uff0c",
      "topic": {
        "id": 4375,
        "commentCount": 10,
        "viewCount": 1561,
        "__typename": "TopicNode"
      },
      "byLeetcode": false,
      "isMyFavorite": false,
      "isMostPopular": false,
      "isEditorsPick": false,
      "upvoteCount": 14,
      "upvoted": false,
      "hitCount": 1999,
      "__typename": "SolutionArticleNode",
      "content": "#  \u4e24\u6570\u76f8\u52a0\n\u7ed9\u51fa\u4e24\u4e2a **\u975e\u7a7a** \u7684\u94fe\u8868\u7528\u6765\u8868\u793a\u4e24\u4e2a\u975e\u8d1f\u7684\u6574\u6570\u3002\u5176\u4e2d\uff0c\u5b83\u4eec\u5404\u81ea\u7684\u4f4d\u6570\u662f\u6309\u7167 \u9006\u5e8f \u7684\u65b9\u5f0f\u5b58\u50a8\u7684\uff0c\u5e76\u4e14\u5b83\u4eec\u7684\u6bcf\u4e2a\u8282\u70b9\u53ea\u80fd\u5b58\u50a8 \u4e00\u4f4d \u6570\u5b57\u3002\n\n\u5982\u679c\uff0c\u6211\u4eec\u5c06\u8fd9\u4e24\u4e2a\u6570\u76f8\u52a0\u8d77\u6765\uff0c\u5219\u4f1a\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u94fe\u8868\u6765\u8868\u793a\u5b83\u4eec\u7684\u548c\u3002\n\n\u60a8\u53ef\u4ee5\u5047\u8bbe\u9664\u4e86\u6570\u5b57 0 \u4e4b\u5916\uff0c\u8fd9\u4e24\u4e2a\u6570\u90fd\u4e0d\u4f1a\u4ee5 0 \u5f00\u5934\u3002\n\n\u793a\u4f8b\uff1a\n\n```\n\u8f93\u5165\uff1a(2 -> 4 -> 3) + (5 -> 6 -> 4)\n\u8f93\u51fa\uff1a7 -> 0 -> 8\n\u539f\u56e0\uff1a342 + 465 = 807\n```\n#  \u89e3\u6cd51\uff1a\n##  \u6574\u4f53\u601d\u8def\uff1a\n\u5c06\u957f\u5ea6\u8f83\u77ed\u7684\u94fe\u8868\u5728\u672b\u5c3e\u8865\u96f6\u4f7f\u5f97\u4e24\u4e2a\u8fde\u8868\u957f\u5ea6\u76f8\u7b49\uff0c\u518d\u4e00\u4e2a\u4e00\u4e2a\u5143\u7d20\u5bf9\u5176\u76f8\u52a0\uff08\u8003\u8651\u8fdb\u4f4d\uff09\n\n##  \u5177\u4f53\u6b65\u9aa4\uff1a\n1. \u83b7\u53d6\u4e24\u4e2a\u94fe\u8868\u6240\u5bf9\u5e94\u7684\u957f\u5ea6\n2. \u5728\u8f83\u77ed\u7684\u94fe\u8868\u672b\u5c3e\u8865\u96f6\n3. \u5bf9\u9f50\u76f8\u52a0\u8003\u8651\u8fdb\u4f4d\n\n###  \u5b9e\u73b0\u4ee3\u7801\uff1a\n\n```\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\n        int len1=1;//\u8bb0\u5f55l1\u7684\u957f\u5ea6\n        int len2=1;//\u8bb0\u5f55l2\u7684\u957f\u5ea6\n        ListNode* p=l1;\n        ListNode* q=l2;\n        while(p->next!=NULL)//\u83b7\u53d6l1\u7684\u957f\u5ea6\n        {\n            len1++;\n            p=p->next;\n        }\n        while(q->next!=NULL)//\u83b7\u53d6l2\u7684\u957f\u5ea6\n        {\n            len2++;\n            q=q->next;\n        }\n        if(len1>len2)//l1\u8f83\u957f\uff0c\u5728l2\u672b\u5c3e\u8865\u96f6\n        {\n            for(int i=1;i<=len1-len2;i++)\n            {\n                q->next=new ListNode(0);\n                q=q->next;\n            }\n        }\n        else//l2\u8f83\u957f\uff0c\u5728l1\u672b\u5c3e\u8865\u96f6\n        {\n            for(int i=1;i<=len2-len1;i++)\n            {\n                p->next=new ListNode(0);\n                p=p->next;\n            }\n        }\n        p=l1;\n        q=l2;\n        bool count=false;//\u8bb0\u5f55\u8fdb\u4f4d\n        ListNode* l3=new ListNode(-1);//\u5b58\u653e\u7ed3\u679c\u7684\u94fe\u8868\n        ListNode* w=l3;//l3\u7684\u79fb\u52a8\u6307\u9488\n        int i=0;//\u8bb0\u5f55\u76f8\u52a0\u7ed3\u679c\n        while(p!=NULL&&q!=NULL)\n        {\n            i=count+p->val+q->val;\n            w->next=new ListNode(i%10);\n            count=i>=10?true:false;\n            w=w->next;\n            p=p->next;\n            q=q->next;\n        }\n        if(count)//\u82e5\u6700\u540e\u8fd8\u6709\u8fdb\u4f4d\n        {\n            w->next=new ListNode(1);\n            w=w->next;\n        }\n        return l3->next; \n    }\n};\n```\n\n#  \u89e3\u6cd52\uff1a\n##  \u6574\u4f53\u601d\u8def\uff1a\n\u4e0d\u5bf9\u9f50\u8865\u96f6\uff0c\u82e5\u94fe\u8868\u4e0d\u4e3a\u7a7a\u5219\u7528sum(\u4ee3\u8868\u6bcf\u4e2a\u4f4d\u7684\u548c\u7684\u7ed3\u679c)\u52a0\u4e0a\uff0c\u8003\u8651\u8fdb\u4f4d\u3002\n\n##  \u5b9e\u73b0\u4ee3\u7801\uff1a\n\n```\nclass Solution {\npublic:\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\n        ListNode* head=new ListNode(-1);//\u5b58\u653e\u7ed3\u679c\u7684\u94fe\u8868\n        ListNode* h=head;//\u79fb\u52a8\u6307\u9488\n        int sum=0;//\u6bcf\u4e2a\u4f4d\u7684\u52a0\u548c\u7ed3\u679c\n        bool carry=false;//\u8fdb\u4f4d\u6807\u5fd7\n        while(l1!=NULL||l2!=NULL)\n        {\n            sum=0;\n            if(l1!=NULL)\n            {\n                sum+=l1->val;\n                l1=l1->next;\n            }\n            if(l2!=NULL)\n            {\n                sum+=l2->val;\n                l2=l2->next;\n            }\n            if(carry)\n                sum++;\n            h->next=new ListNode(sum%10);\n            h=h->next;\n            carry=sum>=10?true:false;\n        }\n        if(carry)\n        {\n            h->next=new ListNode(1);\n        }\n        return head->next;\n    }\n};\n```\n**\u89c9\u5f97\u672c\u6587\u5bf9\u4f60\u6709\u5e2e\u52a9\uff0c\u70b9\u4e2a\u8d5e\u5662\u8c22\u8c22**\n\n"
    }
  }
}