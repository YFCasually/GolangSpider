{"data":{"question":{"questionId":"781","questionFrontendId":"770","boundTopicId":1940,"title":"Basic Calculator IV","titleSlug":"basic-calculator-iv","content":"<p>Given an <code>expression</code>&nbsp;such as <code>expression = &quot;e + 8 - a + 5&quot;</code> and an evaluation map such as <code>{&quot;e&quot;: 1}</code> (given in terms of <code>evalvars = [&quot;e&quot;]</code> and <code>evalints = [1]</code>), return a list of tokens representing the simplified expression, such as <code>[&quot;-1*a&quot;,&quot;14&quot;]</code></p>\r\n\r\n<ul>\r\n\t<li>An expression alternates chunks and symbols, with a space separating each chunk and symbol.</li>\r\n\t<li>A chunk is either an expression in parentheses, a variable, or a non-negative integer.</li>\r\n\t<li>A variable is a string of lowercase letters (not including digits.) Note that variables can be multiple letters, and note that variables never have a leading coefficient or unary operator like <code>&quot;2x&quot;</code> or <code>&quot;-x&quot;</code>.</li>\r\n</ul>\r\n\r\n<p>Expressions are evaluated in the usual order: brackets first, then multiplication, then addition and subtraction. For example, <code>expression = &quot;1 + 2 * 3&quot;</code> has an answer of <code>[&quot;7&quot;]</code>.</p>\r\n\r\n<p>The format of the output is as follows:</p>\r\n\r\n<ul>\r\n\t<li>For each term of free variables with non-zero coefficient, we write the free variables within a term in sorted order lexicographically. For example, we would never write a term like <code>&quot;b*a*c&quot;</code>, only <code>&quot;a*b*c&quot;</code>.</li>\r\n\t<li>Terms have degree equal to the number of free variables being multiplied, counting multiplicity. (For example, <code>&quot;a*a*b*c&quot;</code> has degree 4.) We write the largest degree terms of our answer first, breaking ties by lexicographic order ignoring the leading coefficient of the term.</li>\r\n\t<li>The leading coefficient of the term is placed directly to the left with an asterisk separating it from the variables (if they exist.)&nbsp; A leading coefficient of 1 is still printed.</li>\r\n\t<li>An example of a well formatted answer is <code>[&quot;-2*a*a*a&quot;, &quot;3*a*a*b&quot;, &quot;3*b*b&quot;, &quot;4*a&quot;, &quot;5*c&quot;, &quot;-6&quot;]</code>&nbsp;</li>\r\n\t<li>Terms (including constant terms) with coefficient 0 are not included.&nbsp; For example, an expression of &quot;0&quot; has an output of [].</li>\r\n</ul>\r\n\r\n<p><strong>Examples:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> expression = &quot;e + 8 - a + 5&quot;, evalvars = [&quot;e&quot;], evalints = [1]\r\n<strong>Output:</strong> [&quot;-1*a&quot;,&quot;14&quot;]\r\n\r\n<strong>Input:</strong> expression = &quot;e - 8 + temperature - pressure&quot;,\r\nevalvars = [&quot;e&quot;, &quot;temperature&quot;], evalints = [1, 12]\r\n<strong>Output:</strong> [&quot;-1*pressure&quot;,&quot;5&quot;]\r\n\r\n<strong>Input:</strong> expression = &quot;(e + 8) * (e - 8)&quot;, evalvars = [], evalints = []\r\n<strong>Output:</strong> [&quot;1*e*e&quot;,&quot;-64&quot;]\r\n\r\n<strong>Input:</strong> expression = &quot;7 - 7&quot;, evalvars = [], evalints = []\r\n<strong>Output:</strong> []\r\n\r\n<strong>Input:</strong> expression = &quot;a * b * c + b * a * c * 4&quot;, evalvars = [], evalints = []\r\n<strong>Output:</strong> [&quot;5*a*b*c&quot;]\r\n\r\n<strong>Input:</strong> expression = &quot;((a - b) * (b - c) + (c - a)) * ((a - b) + (b - c) * (c - a))&quot;,\r\nevalvars = [], evalints = []\r\n<strong>Output:</strong> [&quot;-1*a*a*b*b&quot;,&quot;2*a*a*b*c&quot;,&quot;-1*a*a*c*c&quot;,&quot;1*a*b*b*b&quot;,&quot;-1*a*b*b*c&quot;,&quot;-1*a*b*c*c&quot;,&quot;1*a*c*c*c&quot;,&quot;-1*b*b*b*c&quot;,&quot;2*b*b*c*c&quot;,&quot;-1*b*c*c*c&quot;,&quot;2*a*a*b&quot;,&quot;-2*a*a*c&quot;,&quot;-2*a*b*b&quot;,&quot;2*a*c*c&quot;,&quot;1*b*b*b&quot;,&quot;-1*b*b*c&quot;,&quot;1*b*c*c&quot;,&quot;-1*c*c*c&quot;,&quot;-1*a*a&quot;,&quot;1*a*b&quot;,&quot;1*a*c&quot;,&quot;-1*b*c&quot;]\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>expression</code> will have length in range <code>[1, 250]</code>.</li>\r\n\t<li><code>evalvars, evalints</code> will have equal lengths in range <code>[0, 100]</code>.</li>\r\n</ol>\r\n","translatedTitle":"\u57fa\u672c\u8ba1\u7b97\u5668 IV","translatedContent":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u8868\u8fbe\u5f0f&nbsp;<code>expression</code>&nbsp;\u5982&nbsp;<code>expression = &quot;e + 8 - a + 5&quot;</code>&nbsp;\u548c\u4e00\u4e2a\u6c42\u503c\u6620\u5c04\uff0c\u5982&nbsp;<code>{&quot;e&quot;: 1}</code>\uff08\u7ed9\u5b9a\u7684\u5f62\u5f0f\u4e3a&nbsp;<code>evalvars = [&quot;e&quot;]</code> \u548c&nbsp;<code>evalints = [1]</code>\uff09\uff0c\u8fd4\u56de\u8868\u793a\u7b80\u5316\u8868\u8fbe\u5f0f\u7684\u6807\u8bb0\u5217\u8868\uff0c\u4f8b\u5982 <code>[&quot;-1*a&quot;,&quot;14&quot;]</code></p>\n\n<ul>\n\t<li>\u8868\u8fbe\u5f0f\u4ea4\u66ff\u4f7f\u7528\u5757\u548c\u7b26\u53f7\uff0c\u6bcf\u4e2a\u5757\u548c\u7b26\u53f7\u4e4b\u95f4\u6709\u4e00\u4e2a\u7a7a\u683c\u3002</li>\n\t<li>\u5757\u8981\u4e48\u662f\u62ec\u53f7\u4e2d\u7684\u8868\u8fbe\u5f0f\uff0c\u8981\u4e48\u662f\u53d8\u91cf\uff0c\u8981\u4e48\u662f\u975e\u8d1f\u6574\u6570\u3002</li>\n\t<li>\u5757\u662f\u62ec\u53f7\u4e2d\u7684\u8868\u8fbe\u5f0f\uff0c\u53d8\u91cf\u6216\u975e\u8d1f\u6574\u6570\u3002</li>\n\t<li>\u53d8\u91cf\u662f\u4e00\u4e2a\u7531\u5c0f\u5199\u5b57\u6bcd\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\uff08\u4e0d\u5305\u62ec\u6570\u5b57\uff09\u3002\u8bf7\u6ce8\u610f\uff0c\u53d8\u91cf\u53ef\u4ee5\u662f\u591a\u4e2a\u5b57\u6bcd\uff0c\u5e76\u6ce8\u610f\u53d8\u91cf\u4ece\u4e0d\u5177\u6709\u50cf&nbsp;<code>&quot;2x&quot;</code>&nbsp;\u6216&nbsp;<code>&quot;-x&quot;</code>&nbsp;\u8fd9\u6837\u7684\u524d\u5bfc\u7cfb\u6570\u6216\u4e00\u5143\u8fd0\u7b97\u7b26&nbsp;\u3002</li>\n</ul>\n\n<p>\u8868\u8fbe\u5f0f\u6309\u901a\u5e38\u987a\u5e8f\u8fdb\u884c\u6c42\u503c\uff1a\u5148\u662f\u62ec\u53f7\uff0c\u7136\u540e\u6c42\u4e58\u6cd5\uff0c\u518d\u8ba1\u7b97\u52a0\u6cd5\u548c\u51cf\u6cd5\u3002\u4f8b\u5982\uff0c<code>expression = &quot;1 + 2 * 3&quot;</code>&nbsp;\u7684\u7b54\u6848\u662f <code>[&quot;7&quot;]</code>\u3002</p>\n\n<p>\u8f93\u51fa\u683c\u5f0f\u5982\u4e0b\uff1a</p>\n\n<ul>\n\t<li>\u5bf9\u4e8e\u7cfb\u6570\u975e\u96f6\u7684\u6bcf\u4e2a\u81ea\u53d8\u91cf\u9879\uff0c\u6211\u4eec\u6309\u5b57\u5178\u6392\u5e8f\u7684\u987a\u5e8f\u5c06\u81ea\u53d8\u91cf\u5199\u5728\u4e00\u4e2a\u9879\u4e2d\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u6c38\u8fdc\u4e0d\u4f1a\u5199\u50cf <code>&ldquo;b*a*c&rdquo;</code> \u8fd9\u6837\u7684\u9879\uff0c\u53ea\u5199 <code>&ldquo;a*b*c&rdquo;</code>\u3002</li>\n\t<li>\u9879\u7684\u6b21\u6570\u7b49\u4e8e\u88ab\u4e58\u7684\u81ea\u53d8\u91cf\u7684\u6570\u76ee\uff0c\u5e76\u8ba1\u7b97\u91cd\u590d\u9879\u3002(\u4f8b\u5982\uff0c<code>&quot;a*a*b*c&quot;</code> \u7684\u6b21\u6570\u4e3a 4\u3002)\u3002\u6211\u4eec\u5148\u5199\u51fa\u7b54\u6848\u7684\u6700\u5927\u6b21\u6570\u9879\uff0c\u7528\u5b57\u5178\u987a\u5e8f\u6253\u7834\u5173\u7cfb\uff0c\u6b64\u65f6\u5ffd\u7565\u8bcd\u7684\u524d\u5bfc\u7cfb\u6570\u3002</li>\n\t<li>\u9879\u7684\u524d\u5bfc\u7cfb\u6570\u76f4\u63a5\u653e\u5728\u5de6\u8fb9\uff0c\u7528\u661f\u53f7\u5c06\u5b83\u4e0e\u53d8\u91cf\u5206\u9694\u5f00(\u5982\u679c\u5b58\u5728\u7684\u8bdd)\u3002\u524d\u5bfc\u7cfb\u6570 1 \u4ecd\u7136\u8981\u6253\u5370\u51fa\u6765\u3002</li>\n\t<li>\u683c\u5f0f\u826f\u597d\u7684\u4e00\u4e2a\u793a\u4f8b\u7b54\u6848\u662f&nbsp;<code>[&quot;-2*a*a*a&quot;, &quot;3*a*a*b&quot;, &quot;3*b*b&quot;, &quot;4*a&quot;, &quot;5*c&quot;, &quot;-6&quot;]</code>&nbsp;\u3002</li>\n\t<li>\u7cfb\u6570\u4e3a 0 \u7684\u9879\uff08\u5305\u62ec\u5e38\u6570\u9879\uff09\u4e0d\u5305\u62ec\u5728\u5185\u3002\u4f8b\u5982\uff0c&ldquo;0&rdquo; \u7684\u8868\u8fbe\u5f0f\u8f93\u51fa\u4e3a []\u3002</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>expression = &quot;e + 8 - a + 5&quot;, evalvars = [&quot;e&quot;], evalints = [1]\n<strong>\u8f93\u51fa\uff1a</strong>[&quot;-1*a&quot;,&quot;14&quot;]\n\n<strong>\u8f93\u5165\uff1a</strong>expression = &quot;e - 8 + temperature - pressure&quot;,\nevalvars = [&quot;e&quot;, &quot;temperature&quot;], evalints = [1, 12]\n<strong>\u8f93\u51fa\uff1a</strong>[&quot;-1*pressure&quot;,&quot;5&quot;]\n\n<strong>\u8f93\u5165\uff1a</strong>expression = &quot;(e + 8) * (e - 8)&quot;, evalvars = [], evalints = []\n<strong>\u8f93\u51fa\uff1a</strong>[&quot;1*e*e&quot;,&quot;-64&quot;]\n\n<strong>\u8f93\u5165\uff1a</strong>expression = &quot;7 - 7&quot;, evalvars = [], evalints = []\n<strong>\u8f93\u51fa\uff1a</strong>[]\n\n<strong>\u8f93\u5165\uff1a</strong>expression = &quot;a * b * c + b * a * c * 4&quot;, evalvars = [], evalints = []\n<strong>\u8f93\u51fa\uff1a</strong>[&quot;5*a*b*c&quot;]\n\n<strong>\u8f93\u5165\uff1a</strong>expression = &quot;((a - b) * (b - c) + (c - a)) * ((a - b) + (b - c) * (c - a))&quot;,\nevalvars = [], evalints = []\n<strong>\u8f93\u51fa\uff1a</strong>[&quot;-1*a*a*b*b&quot;,&quot;2*a*a*b*c&quot;,&quot;-1*a*a*c*c&quot;,&quot;1*a*b*b*b&quot;,&quot;-1*a*b*b*c&quot;,&quot;-1*a*b*c*c&quot;,&quot;1*a*c*c*c&quot;,&quot;-1*b*b*b*c&quot;,&quot;2*b*b*c*c&quot;,&quot;-1*b*c*c*c&quot;,&quot;2*a*a*b&quot;,&quot;-2*a*a*c&quot;,&quot;-2*a*b*b&quot;,&quot;2*a*c*c&quot;,&quot;1*b*b*b&quot;,&quot;-1*b*b*c&quot;,&quot;1*b*c*c&quot;,&quot;-1*c*c*c&quot;,&quot;-1*a*a&quot;,&quot;1*a*b&quot;,&quot;1*a*c&quot;,&quot;-1*b*c&quot;]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>expression</code> \u7684\u957f\u5ea6\u5728&nbsp;<code>[1, 250]</code>&nbsp;\u8303\u56f4\u5185\u3002</li>\n\t<li><code>evalvars, evalints</code> \u5728\u8303\u56f4&nbsp;<code>[0, 100]</code>&nbsp;\u5185\uff0c\u4e14\u957f\u5ea6\u76f8\u540c\u3002</li>\n</ol>\n","isPaidOnly":false,"difficulty":"Hard","likes":7,"dislikes":0,"isLiked":null,"similarQuestions":"[{\"title\": \"Parse Lisp Expression\", \"titleSlug\": \"parse-lisp-expression\", \"difficulty\": \"Hard\", \"translatedTitle\": \"Lisp \\u8bed\\u6cd5\\u89e3\\u6790\"}, {\"title\": \"Basic Calculator III\", \"titleSlug\": \"basic-calculator-iii\", \"difficulty\": \"Hard\", \"translatedTitle\": \"\\u57fa\\u672c\\u8ba1\\u7b97\\u5668 III\"}]","contributors":[],"langToValidPlayground":"{\"cpp\": false, \"java\": true, \"python\": true, \"python3\": false, \"mysql\": false, \"mssql\": false, \"oraclesql\": false, \"c\": false, \"csharp\": false, \"javascript\": false, \"ruby\": false, \"bash\": false, \"swift\": false, \"golang\": false, \"scala\": false, \"html\": false, \"pythonml\": false, \"kotlin\": false, \"rust\": false, \"php\": false}","topicTags":[{"name":"Stack","slug":"stack","translatedName":"\u6808","__typename":"TopicTagNode"},{"name":"Hash Table","slug":"hash-table","translatedName":"\u54c8\u5e0c\u8868","__typename":"TopicTagNode"},{"name":"String","slug":"string","translatedName":"\u5b57\u7b26\u4e32","__typename":"TopicTagNode"}],"companyTagStats":null,"codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"class Solution {\npublic:\n    vector<string> basicCalculatorIV(string expression, vector<string>& evalvars, vector<int>& evalints) {\n        \n    }\n};","__typename":"CodeSnippetNode"},{"lang":"Java","langSlug":"java","code":"class Solution {\n    public List<String> basicCalculatorIV(String expression, String[] evalvars, int[] evalints) {\n        \n    }\n}","__typename":"CodeSnippetNode"},{"lang":"Python","langSlug":"python","code":"class Solution(object):\n    def basicCalculatorIV(self, expression, evalvars, evalints):\n        \"\"\"\n        :type expression: str\n        :type evalvars: List[str]\n        :type evalints: List[int]\n        :rtype: List[str]\n        \"\"\"\n        ","__typename":"CodeSnippetNode"},{"lang":"Python3","langSlug":"python3","code":"class Solution:\n    def basicCalculatorIV(self, expression: str, evalvars: List[str], evalints: List[int]) -> List[str]:\n        ","__typename":"CodeSnippetNode"},{"lang":"C","langSlug":"c","code":"\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar ** basicCalculatorIV(char * expression, char ** evalvars, int evalvarsSize, int* evalints, int evalintsSize, int* returnSize){\n\n}\n\n","__typename":"CodeSnippetNode"},{"lang":"C#","langSlug":"csharp","code":"public class Solution {\n    public IList<string> BasicCalculatorIV(string expression, string[] evalvars, int[] evalints) {\n        \n    }\n}","__typename":"CodeSnippetNode"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * @param {string} expression\n * @param {string[]} evalvars\n * @param {number[]} evalints\n * @return {string[]}\n */\nvar basicCalculatorIV = function(expression, evalvars, evalints) {\n    \n};","__typename":"CodeSnippetNode"},{"lang":"Ruby","langSlug":"ruby","code":"# @param {String} expression\n# @param {String[]} evalvars\n# @param {Integer[]} evalints\n# @return {String[]}\ndef basic_calculator_iv(expression, evalvars, evalints)\n    \nend","__typename":"CodeSnippetNode"},{"lang":"Swift","langSlug":"swift","code":"class Solution {\n    func basicCalculatorIV(_ expression: String, _ evalvars: [String], _ evalints: [Int]) -> [String] {\n        \n    }\n}","__typename":"CodeSnippetNode"},{"lang":"Go","langSlug":"golang","code":"func basicCalculatorIV(expression string, evalvars []string, evalints []int) []string {\n    \n}","__typename":"CodeSnippetNode"},{"lang":"Scala","langSlug":"scala","code":"object Solution {\n    def basicCalculatorIV(expression: String, evalvars: Array[String], evalints: Array[Int]): List[String] = {\n        \n    }\n}","__typename":"CodeSnippetNode"},{"lang":"Kotlin","langSlug":"kotlin","code":"class Solution {\n    fun basicCalculatorIV(expression: String, evalvars: Array<String>, evalints: IntArray): List<String> {\n        \n    }\n}","__typename":"CodeSnippetNode"},{"lang":"Rust","langSlug":"rust","code":"impl Solution {\n    pub fn basic_calculator_iv(expression: String, evalvars: Vec<String>, evalints: Vec<i32>) -> Vec<String> {\n        \n    }\n}","__typename":"CodeSnippetNode"},{"lang":"PHP","langSlug":"php","code":"class Solution {\n\n    /**\n     * @param String $expression\n     * @param String[] $evalvars\n     * @param Integer[] $evalints\n     * @return String[]\n     */\n    function basicCalculatorIV($expression, $evalvars, $evalints) {\n        \n    }\n}","__typename":"CodeSnippetNode"}],"stats":"{\"totalAccepted\": \"76\", \"totalSubmission\": \"165\", \"totalAcceptedRaw\": 76, \"totalSubmissionRaw\": 165, \"acRate\": \"46.1%\"}","hints":["One way is with a Polynomial class.  For example,\r\n\r\n* `Poly:add(this, that)` returns the result of `this + that`.\r\n* `Poly:sub(this, that)` returns the result of `this - that`.\r\n* `Poly:mul(this, that)` returns the result of `this * that`.\r\n* `Poly:evaluate(this, evalmap)` returns the polynomial after replacing all free variables with constants as specified by `evalmap`.\r\n* `Poly:toList(this)` returns the polynomial in the correct output format.\r\n\r\n* `Solution::combine(left, right, symbol)` returns the result of applying the binary operator represented by `symbol` to `left` and `right`.\r\n* `Solution::make(expr)` makes a new `Poly` represented by either the constant or free variable specified by `expr`.\r\n* `Solution::parse(expr)` parses an expression into a new `Poly`."],"solution":null,"status":null,"sampleTestCase":"\"e + 8 - a + 5\"\n[\"e\"]\n[1]","metaData":"{\r\n  \"name\": \"basicCalculatorIV\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"expression\",\r\n      \"type\": \"string\"\r\n    },\r\n    {\r\n      \"name\": \"evalvars\",\r\n      \"type\": \"string[]\"\r\n    },\r\n    {\r\n      \"name\": \"evalints\",\r\n      \"type\": \"integer[]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"list<string>\"\r\n  }\r\n}\r\n","judgerAvailable":true,"judgeType":"large","mysqlSchemas":[],"enableRunCode":true,"enableTestMode":false,"envInfo":"{\"cpp\": [\"C++\", \"<p>\\u7248\\u672c\\uff1a<code>g++ 6.3</code> \\u91c7\\u7528\\u6700\\u65b0C++ 14\\u6807\\u51c6\\u3002</p>\\r\\n\\r\\n<p>\\u7f16\\u8bd1\\u65f6\\uff0c\\u5c06\\u4f1a\\u91c7\\u7528<code>-O1</code>\\u7ea7\\u4f18\\u5316\\u3002<a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> \\u4e5f\\u88ab\\u5f00\\u542f\\u6765\\u68c0\\u6d4b<code>out-of-bounds</code>\\u548c<code>use-after-free</code>\\u9519\\u8bef\\u3002</p>\\r\\n\\r\\n<p>\\u4e3a\\u4e86\\u4f7f\\u7528\\u65b9\\u4fbf\\uff0c\\u5927\\u90e8\\u5206\\u6807\\u51c6\\u5e93\\u7684\\u5934\\u6587\\u4ef6\\u5df2\\u7ecf\\u88ab\\u81ea\\u52a8\\u5bfc\\u5165\\u3002</p>\"], \"java\": [\"Java\", \"<p>\\u7248\\u672c\\uff1a<code>Java 1.8.0</code>\\u3002\\u53ef\\u4ee5\\u4f7f\\u7528Java 8\\u7684\\u7279\\u6027\\u4f8b\\u5982\\uff0clambda expressions \\u548c stream API\\u3002</p>\\r\\n\\r\\n<p>\\u4e3a\\u4e86\\u65b9\\u4fbf\\u8d77\\u89c1\\uff0c\\u5927\\u90e8\\u5206\\u6807\\u51c6\\u5e93\\u7684\\u5934\\u6587\\u4ef6\\u5df2\\u88ab\\u5bfc\\u5165\\u3002</p>\"], \"python\": [\"Python\", \"<p>\\u7248\\u672c\\uff1a <code>Python 2.7.12</code></p>\\r\\n\\r\\n<p>\\u4e3a\\u4e86\\u65b9\\u4fbf\\u8d77\\u89c1\\uff0c\\u5927\\u90e8\\u5206\\u5e38\\u7528\\u5e93\\u5df2\\u7ecf\\u88ab\\u81ea\\u52a8 \\u5bfc\\u5165\\uff0c\\u5982\\uff1a<a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>\\u3002\\u5982\\u679c\\u60a8\\u9700\\u8981\\u4f7f\\u7528\\u5176\\u4ed6\\u5e93\\u51fd\\u6570\\uff0c\\u8bf7\\u81ea\\u884c\\u5bfc\\u5165\\u3002</p>\\r\\n\\r\\n<p>\\u6ce8\\u610f Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">\\u5c06\\u57282020\\u5e74\\u540e\\u4e0d\\u518d\\u7ef4\\u62a4</a>\\u3002 \\u5982\\u60f3\\u4f7f\\u7528\\u6700\\u65b0\\u7248\\u7684Python\\uff0c\\u8bf7\\u9009\\u62e9Python 3\\u3002</p>\"], \"c\": [\"C\", \"<p>\\u7248\\u672c\\uff1a<code>GCC 6.3</code>\\uff0c\\u91c7\\u7528GNU99\\u6807\\u51c6\\u3002</p>\\r\\n\\r\\n<p>\\u7f16\\u8bd1\\u65f6\\uff0c\\u5c06\\u4f1a\\u91c7\\u7528<code>-O1</code>\\u7ea7\\u4f18\\u5316\\u3002 <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a>\\u4e5f\\u88ab\\u5f00\\u542f\\u6765\\u68c0\\u6d4b<code>out-of-bounds</code>\\u548c<code>use-after-free</code>\\u9519\\u8bef\\u3002</p>\\r\\n\\r\\n<p>\\u4e3a\\u4e86\\u4f7f\\u7528\\u65b9\\u4fbf\\uff0c\\u5927\\u90e8\\u5206\\u6807\\u51c6\\u5e93\\u7684\\u5934\\u6587\\u4ef6\\u5df2\\u7ecf\\u88ab\\u81ea\\u52a8\\u5bfc\\u5165\\u3002</p>\\r\\n\\r\\n<p>\\u5982\\u60f3\\u4f7f\\u7528\\u54c8\\u5e0c\\u8868\\u8fd0\\u7b97, \\u60a8\\u53ef\\u4ee5\\u4f7f\\u7528 <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>\\u3002 \\\"uthash.h\\\"\\u5df2\\u7ecf\\u9ed8\\u8ba4\\u88ab\\u5bfc\\u5165\\u3002\\u8bf7\\u770b\\u5982\\u4e0b\\u793a\\u4f8b:</p>\\r\\n\\r\\n<p><b>1. \\u5f80\\u54c8\\u5e0c\\u8868\\u4e2d\\u6dfb\\u52a0\\u4e00\\u4e2a\\u5bf9\\u8c61\\uff1a</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. \\u5728\\u54c8\\u5e0c\\u8868\\u4e2d\\u67e5\\u627e\\u4e00\\u4e2a\\u5bf9\\u8c61\\uff1a</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. \\u4ece\\u54c8\\u5e0c\\u8868\\u4e2d\\u5220\\u9664\\u4e00\\u4e2a\\u5bf9\\u8c61\\uff1a</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><code>Mono 5.12.0</code>\\u63d0\\u4f9b\\u4e86<a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-7\\\" target=\\\"_blank\\\">\\u5bf9C# 7\\u7684\\u5168\\u9762\\u652f\\u6301</a>\\u3002</p>\\r\\n\\r\\n<p>\\u60a8\\u7684\\u4ee3\\u7801\\u5728\\u7f16\\u8bd1\\u65f6\\u9ed8\\u8ba4\\u5f00\\u542f\\u4e86debug\\u6807\\u8bb0(<code>/debug</code>)\\u3002</p>\"], \"javascript\": [\"JavaScript\", \"<p>\\u7248\\u672c\\uff1a<code>Nodejs 10.15.0</code></p>\\r\\n\\r\\n<p>\\u60a8\\u7684\\u4ee3\\u7801\\u5728\\u6267\\u884c\\u65f6\\u5c06\\u5e26\\u4e0a <code>--harmony</code> \\u6807\\u8bb0\\u6765\\u5f00\\u542f <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">\\u65b0\\u7248ES6\\u7279\\u6027</a>\\u3002</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> \\u5e93\\u5df2\\u7ecf\\u9ed8\\u8ba4\\u88ab\\u5305\\u542b\\u3002</p>\"], \"ruby\": [\"Ruby\", \"<p>\\u4f7f\\u7528<code>Ruby 2.4.1</code>\\u6267\\u884c</p>\"], \"swift\": [\"Swift\", \"<p>\\u7248\\u672c\\uff1a<code>Swift 4.2</code></p>\\r\\n\\r\\n<p>\\u6211\\u4eec\\u901a\\u5e38\\u4fdd\\u8bc1\\u66f4\\u65b0\\u5230 <a href=\\\"https://swift.org/download/\\\" target=\\\"_blank\\\">Apple\\u653e\\u51fa\\u7684\\u6700\\u65b0\\u7248Swift</a>\\u3002\\u5982\\u679c\\u60a8\\u53d1\\u73b0Swift\\u4e0d\\u662f\\u6700\\u65b0\\u7248\\u7684\\uff0c\\u8bf7\\u8054\\u7cfb\\u6211\\u4eec\\uff01\\u6211\\u4eec\\u5c06\\u5c3d\\u5feb\\u66f4\\u65b0\\u3002</p>\"], \"golang\": [\"Go\", \"<p>\\u7248\\u672c\\uff1a<code>Go 1.10.3</code></p>\"], \"python3\": [\"Python3\", \"<p>\\u7248\\u672c\\uff1a<code>Python 3.6</code></p>\\r\\n\\r\\n<p>\\u4e3a\\u4e86\\u65b9\\u4fbf\\u8d77\\u89c1\\uff0c\\u5927\\u90e8\\u5206\\u5e38\\u7528\\u5e93\\u5df2\\u7ecf\\u88ab\\u81ea\\u52a8 \\u5bfc\\u5165\\uff0c\\u5982<a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>\\u3002 \\u5982\\u679c\\u60a8\\u9700\\u8981\\u4f7f\\u7528\\u5176\\u4ed6\\u5e93\\u51fd\\u6570\\uff0c\\u8bf7\\u81ea\\u884c\\u5bfc\\u5165\\u3002</p>\"], \"scala\": [\"Scala\", \"<p>\\u7248\\u672c\\uff1a<code>Scala 2.11.6</code></p>\"], \"kotlin\": [\"Kotlin\", \"<p>\\u7248\\u672c\\uff1a<code>Kotlin 1.2.50</code></p>\"], \"rust\": [\"Rust\", \"<p>\\u7248\\u672c\\uff1a<code>rust 1.31.0 (edition = 2018)</code></p>\\r\\n\\r\\n<p>\\u652f\\u6301 crates.io \\u7684 <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand</a></p>\"], \"php\": [\"PHP\", \"<p>Run with <code>PHP 7.2</code>.</p>\"]}","__typename":"QuestionNode"}}}