{"data":{"question":{"questionId":"773","questionFrontendId":"558","boundTopicId":1787,"title":"Quad Tree Intersection","titleSlug":"quad-tree-intersection","content":"<p>A quadtree is a tree data in which each internal node has exactly four children: <code>topLeft</code>, <code>topRight</code>, <code>bottomLeft</code> and <code>bottomRight</code>. Quad trees are often used to partition a two-dimensional space by recursively subdividing it into four quadrants or regions.</p>\r\n\r\n<p>We want to store True/False information in our quad tree. The quad tree is used to represent a <code>N * N</code> boolean grid. For each node, it will be subdivided into four children nodes <strong>until the values in the region it represents are all the same</strong>. Each node has another two boolean attributes : <code>isLeaf</code> and <code>val</code>. <code>isLeaf</code> is true if and only if the node is a leaf node. The <code>val</code> attribute for a leaf node contains the value of the region it represents.</p>\r\n\r\n<p>For example, below are two quad trees A and B:</p>\r\n\r\n<pre>\r\nA:\r\n+-------+-------+   T: true\r\n|       |       |   F: false\r\n|   T   |   T   |\r\n|       |       |\r\n+-------+-------+\r\n|       |       |\r\n|   F   |   F   |\r\n|       |       |\r\n+-------+-------+\r\ntopLeft: T\r\ntopRight: T\r\nbottomLeft: F\r\nbottomRight: F\r\n\r\nB:               \r\n+-------+---+---+\r\n|       | F | F |\r\n|   T   +---+---+\r\n|       | T | T |\r\n+-------+---+---+\r\n|       |       |\r\n|   T   |   F   |\r\n|       |       |\r\n+-------+-------+\r\ntopLeft: T\r\ntopRight:\r\n     topLeft: F\r\n     topRight: F\r\n     bottomLeft: T\r\n     bottomRight: T\r\nbottomLeft: T\r\nbottomRight: F\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Your task is to implement a function that will take two quadtrees and return a quadtree that represents the logical OR (or union) of the two trees.</p>\r\n\r\n<pre>\r\nA:                 B:                 C (A or B):\r\n+-------+-------+  +-------+---+---+  +-------+-------+\r\n|       |       |  |       | F | F |  |       |       |\r\n|   T   |   T   |  |   T   +---+---+  |   T   |   T   |\r\n|       |       |  |       | T | T |  |       |       |\r\n+-------+-------+  +-------+---+---+  +-------+-------+\r\n|       |       |  |       |       |  |       |       |\r\n|   F   |   F   |  |   T   |   F   |  |   T   |   F   |\r\n|       |       |  |       |       |  |       |       |\r\n+-------+-------+  +-------+-------+  +-------+-------+\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li>Both <code>A</code> and <code>B</code>&nbsp;represent grids of size <code>N * N</code>.</li>\r\n\t<li><code>N</code> is guaranteed to be a power of 2.</li>\r\n\t<li>If you want to know more about the quad tree, you can refer to its <a href=\"https://en.wikipedia.org/wiki/Quadtree\">wiki</a>.</li>\r\n\t<li>The logic OR operation is defined as this: &quot;A or B&quot; is true if <code>A is true</code>, or if <code>B is true</code>, or if <code>both A and B are true</code>.</li>\r\n</ol>\r\n","translatedTitle":"\u56db\u53c9\u6811\u4ea4\u96c6","translatedContent":"<p>\u56db\u53c9\u6811\u662f\u4e00\u79cd\u6811\u6570\u636e\uff0c\u5176\u4e2d\u6bcf\u4e2a\u7ed3\u70b9\u6070\u597d\u6709\u56db\u4e2a\u5b50\u7ed3\u70b9\uff1a<code>topLeft</code>\u3001<code>topRight</code>\u3001<code>bottomLeft</code>&nbsp;\u548c&nbsp;<code>bottomRight</code>\u3002\u56db\u53c9\u6811\u901a\u5e38\u88ab\u7528\u6765\u5212\u5206\u4e00\u4e2a\u4e8c\u7ef4\u7a7a\u95f4\uff0c\u9012\u5f52\u5730\u5c06\u5176\u7ec6\u5206\u4e3a\u56db\u4e2a\u8c61\u9650\u6216\u533a\u57df\u3002</p>\n\n<p>\u6211\u4eec\u5e0c\u671b\u5728\u56db\u53c9\u6811\u4e2d\u5b58\u50a8 True/False \u4fe1\u606f\u3002\u56db\u53c9\u6811\u7528\u6765\u8868\u793a <code>N * N</code> \u7684\u5e03\u5c14\u7f51\u683c\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u7ed3\u70b9, \u5b83\u5c06\u88ab\u7b49\u5206\u6210\u56db\u4e2a\u5b69\u5b50\u7ed3\u70b9<strong>\u76f4\u5230\u8fd9\u4e2a\u533a\u57df\u5185\u7684\u503c\u90fd\u662f\u76f8\u540c\u7684</strong>\u3002\u6bcf\u4e2a\u8282\u70b9\u90fd\u6709\u53e6\u5916\u4e24\u4e2a\u5e03\u5c14\u5c5e\u6027\uff1a<code>isLeaf</code>&nbsp;\u548c&nbsp;<code>val</code>\u3002\u5f53\u8fd9\u4e2a\u8282\u70b9\u662f\u4e00\u4e2a\u53f6\u5b50\u7ed3\u70b9\u65f6&nbsp;<code>isLeaf</code>&nbsp;\u4e3a\u771f\u3002<code>val</code>&nbsp;\u53d8\u91cf\u50a8\u5b58\u53f6\u5b50\u7ed3\u70b9\u6240\u4ee3\u8868\u7684\u533a\u57df\u7684\u503c\u3002</p>\n\n<p>\u4f8b\u5982\uff0c\u4e0b\u9762\u662f\u4e24\u4e2a\u56db\u53c9\u6811 A \u548c B\uff1a</p>\n\n<pre>A:\n+-------+-------+   T: true\n|       |       |   F: false\n|   T   |   T   |\n|       |       |\n+-------+-------+\n|       |       |\n|   F   |   F   |\n|       |       |\n+-------+-------+\ntopLeft: T\ntopRight: T\nbottomLeft: F\nbottomRight: F\n\nB:               \n+-------+---+---+\n|       | F | F |\n|   T   +---+---+\n|       | T | T |\n+-------+---+---+\n|       |       |\n|   T   |   F   |\n|       |       |\n+-------+-------+\ntopLeft: T\ntopRight:\n     topLeft: F\n     topRight: F\n     bottomLeft: T\n     bottomRight: T\nbottomLeft: T\nbottomRight: F\n</pre>\n\n<p>&nbsp;</p>\n\n<p>\u4f60\u7684\u4efb\u52a1\u662f\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u6839\u636e\u4e24\u4e2a\u56db\u53c9\u6811\u8fd4\u56de\u8868\u793a\u8fd9\u4e24\u4e2a\u56db\u53c9\u6811\u7684\u903b\u8f91\u6216(\u6216\u5e76)\u7684\u56db\u53c9\u6811\u3002</p>\n\n<pre>A:                 B:                 C (A or B):\n+-------+-------+  +-------+---+---+  +-------+-------+\n|       |       |  |       | F | F |  |       |       |\n|   T   |   T   |  |   T   +---+---+  |   T   |   T   |\n|       |       |  |       | T | T |  |       |       |\n+-------+-------+  +-------+---+---+  +-------+-------+\n|       |       |  |       |       |  |       |       |\n|   F   |   F   |  |   T   |   F   |  |   T   |   F   |\n|       |       |  |       |       |  |       |       |\n+-------+-------+  +-------+-------+  +-------+-------+\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>A</code>&nbsp;\u548c&nbsp;<code>B</code>&nbsp;\u90fd\u8868\u793a\u5927\u5c0f\u4e3a&nbsp;<code>N * N</code>&nbsp;\u7684\u7f51\u683c\u3002</li>\n\t<li><code>N</code>&nbsp;\u5c06\u786e\u4fdd\u662f 2 \u7684\u6574\u6b21\u5e42\u3002</li>\n\t<li>\u5982\u679c\u4f60\u60f3\u4e86\u89e3\u66f4\u591a\u5173\u4e8e\u56db\u53c9\u6811\u7684\u77e5\u8bc6\uff0c\u4f60\u53ef\u4ee5\u53c2\u8003\u8fd9\u4e2a&nbsp;<a href=\"https://en.wikipedia.org/wiki/Quadtree\">wiki</a>&nbsp;\u9875\u9762\u3002</li>\n\t<li>\u903b\u8f91\u6216\u7684\u5b9a\u4e49\u5982\u4e0b\uff1a\u5982\u679c&nbsp;<code>A \u4e3a True</code> \uff0c\u6216\u8005&nbsp;<code>B \u4e3a True</code> \uff0c\u6216\u8005&nbsp;<code>A \u548c B \u90fd\u4e3a True</code>\uff0c\u5219 &quot;A \u6216 B&quot; \u4e3a True\u3002</li>\n</ol>\n","isPaidOnly":false,"difficulty":"Easy","likes":7,"dislikes":0,"isLiked":null,"similarQuestions":"[]","contributors":[],"langToValidPlayground":"{\"cpp\": false, \"java\": false, \"python\": false, \"python3\": false, \"mysql\": false, \"mssql\": false, \"oraclesql\": false, \"c\": false, \"csharp\": false, \"javascript\": false, \"ruby\": false, \"bash\": false, \"swift\": false, \"golang\": false, \"scala\": false, \"html\": false, \"pythonml\": false, \"kotlin\": false, \"rust\": false, \"php\": false}","topicTags":[],"companyTagStats":null,"codeSnippets":[{"lang":"C++","langSlug":"cpp","code":"/*\n// Definition for a QuadTree node.\nclass Node {\npublic:\n    bool val;\n    bool isLeaf;\n    Node* topLeft;\n    Node* topRight;\n    Node* bottomLeft;\n    Node* bottomRight;\n\n    Node() {}\n\n    Node(bool _val, bool _isLeaf, Node* _topLeft, Node* _topRight, Node* _bottomLeft, Node* _bottomRight) {\n        val = _val;\n        isLeaf = _isLeaf;\n        topLeft = _topLeft;\n        topRight = _topRight;\n        bottomLeft = _bottomLeft;\n        bottomRight = _bottomRight;\n    }\n};\n*/\nclass Solution {\npublic:\n    Node* intersect(Node* quadTree1, Node* quadTree2) {\n        \n    }\n};","__typename":"CodeSnippetNode"},{"lang":"Java","langSlug":"java","code":"/*\n// Definition for a QuadTree node.\nclass Node {\n    public boolean val;\n    public boolean isLeaf;\n    public Node topLeft;\n    public Node topRight;\n    public Node bottomLeft;\n    public Node bottomRight;\n\n    public Node() {}\n\n    public Node(boolean _val,boolean _isLeaf,Node _topLeft,Node _topRight,Node _bottomLeft,Node _bottomRight) {\n        val = _val;\n        isLeaf = _isLeaf;\n        topLeft = _topLeft;\n        topRight = _topRight;\n        bottomLeft = _bottomLeft;\n        bottomRight = _bottomRight;\n    }\n};\n*/\nclass Solution {\n    public Node intersect(Node quadTree1, Node quadTree2) {\n        \n    }\n}","__typename":"CodeSnippetNode"},{"lang":"Python","langSlug":"python","code":"\"\"\"\n# Definition for a QuadTree node.\nclass Node(object):\n    def __init__(self, val, isLeaf, topLeft, topRight, bottomLeft, bottomRight):\n        self.val = val\n        self.isLeaf = isLeaf\n        self.topLeft = topLeft\n        self.topRight = topRight\n        self.bottomLeft = bottomLeft\n        self.bottomRight = bottomRight\n\"\"\"\nclass Solution(object):\n    def intersect(self, quadTree1, quadTree2):\n        \"\"\"\n        :type quadTree1: Node\n        :type quadTree2: Node\n        :rtype: Node\n        \"\"\"\n        ","__typename":"CodeSnippetNode"},{"lang":"Python3","langSlug":"python3","code":"\"\"\"\n# Definition for a QuadTree node.\nclass Node:\n    def __init__(self, val, isLeaf, topLeft, topRight, bottomLeft, bottomRight):\n        self.val = val\n        self.isLeaf = isLeaf\n        self.topLeft = topLeft\n        self.topRight = topRight\n        self.bottomLeft = bottomLeft\n        self.bottomRight = bottomRight\n\"\"\"\nclass Solution:\n    def intersect(self, quadTree1: 'Node', quadTree2: 'Node') -> 'Node':\n        ","__typename":"CodeSnippetNode"},{"lang":"C#","langSlug":"csharp","code":"/*\n// Definition for a QuadTree node.\npublic class Node {\n    public bool val;\n    public bool isLeaf;\n    public Node topLeft;\n    public Node topRight;\n    public Node bottomLeft;\n    public Node bottomRight;\n\n    public Node(){}\n    public Node(bool _val,bool _isLeaf,Node _topLeft,Node _topRight,Node _bottomLeft,Node _bottomRight) {\n        val = _val;\n        isLeaf = _isLeaf;\n        topLeft = _topLeft;\n        topRight = _topRight;\n        bottomLeft = _bottomLeft;\n        bottomRight = _bottomRight;\n}\n*/\npublic class Solution {\n    public Node Intersect(Node quadTree1, Node quadTree2) {\n        \n    }\n}","__typename":"CodeSnippetNode"},{"lang":"JavaScript","langSlug":"javascript","code":"/**\n * // Definition for a QuadTree node.\n * function Node(val,isLeaf,topLeft,topRight,bottomLeft,bottomRight) {\n *    this.val = val;\n *    this.isLeaf = isLeaf;\n *    this.topLeft = topLeft;\n *    this.topRight = topRight;\n *    this.bottomLeft = bottomLeft;\n *    this.bottomRight = bottomRight;\n * };\n */\n/**\n * @param {Node} quadTree1\n * @param {Node} quadTree2\n * @return {Node}\n */\nvar intersect = function(quadTree1, quadTree2) {\n    \n};","__typename":"CodeSnippetNode"},{"lang":"PHP","langSlug":"php","code":"/*\n// Definition for a QuadTree node.\nclass Node {\n    public $val;\n    public $isLeaf;\n    public $topLeft;\n    public $topRight;\n    public $bottomLeft;\n    public $bottomRight;\n\n    @param Boolean $val \n    @param Boolean $isLeaf \n    @param Node $topLeft \n    @param Node $topRight \n    @param Node $bottomLeft \n    @param Node $bottomRight \n    function __construct($val, $isLeaf, $topLeft, $topRight, $bottomLeft, $bottomRight) {\n        $this->val = $val;\n        $this->isLeaf = $isLeaf;\n        $this->topLeft = $topLeft;\n        $this->topRight = $topRight;\n        $this->bottomLeft = $bottomLeft;\n        $this->bottomRight = $bottomRight;\n    }\n}\n*/\nclass Solution {\n\n    /**\n     * @param Node $quadTree1\n     * @param Node $quadTree2\n     * @return Node\n     */\n    function intersect($quadTree1, $quadTree2) {\n        \n    }\n}","__typename":"CodeSnippetNode"}],"stats":"{\"totalAccepted\": \"718\", \"totalSubmission\": \"1.7K\", \"totalAcceptedRaw\": 718, \"totalSubmissionRaw\": 1664, \"acRate\": \"43.1%\"}","hints":[],"solution":null,"status":null,"sampleTestCase":"{\"$id\":\"1\",\"bottomLeft\":{\"$id\":\"4\",\"bottomLeft\":null,\"bottomRight\":null,\"isLeaf\":true,\"topLeft\":null,\"topRight\":null,\"val\":false},\"bottomRight\":{\"$id\":\"5\",\"bottomLeft\":null,\"bottomRight\":null,\"isLeaf\":true,\"topLeft\":null,\"topRight\":null,\"val\":false},\"isLeaf\":false,\"topLeft\":{\"$id\":\"2\",\"bottomLeft\":null,\"bottomRight\":null,\"isLeaf\":true,\"topLeft\":null,\"topRight\":null,\"val\":true},\"topRight\":{\"$id\":\"3\",\"bottomLeft\":null,\"bottomRight\":null,\"isLeaf\":true,\"topLeft\":null,\"topRight\":null,\"val\":true},\"val\":true}\n{\"$id\":\"1\",\"bottomLeft\":{\"$id\":\"8\",\"bottomLeft\":null,\"bottomRight\":null,\"isLeaf\":true,\"topLeft\":null,\"topRight\":null,\"val\":true},\"bottomRight\":{\"$id\":\"9\",\"bottomLeft\":null,\"bottomRight\":null,\"isLeaf\":true,\"topLeft\":null,\"topRight\":null,\"val\":false},\"isLeaf\":false,\"topLeft\":{\"$id\":\"2\",\"bottomLeft\":null,\"bottomRight\":null,\"isLeaf\":true,\"topLeft\":null,\"topRight\":null,\"val\":true},\"topRight\":{\"$id\":\"3\",\"bottomLeft\":{\"$id\":\"6\",\"bottomLeft\":null,\"bottomRight\":null,\"isLeaf\":true,\"topLeft\":null,\"topRight\":null,\"val\":true},\"bottomRight\":{\"$id\":\"7\",\"bottomLeft\":null,\"bottomRight\":null,\"isLeaf\":true,\"topLeft\":null,\"topRight\":null,\"val\":true},\"isLeaf\":false,\"topLeft\":{\"$id\":\"4\",\"bottomLeft\":null,\"bottomRight\":null,\"isLeaf\":true,\"topLeft\":null,\"topRight\":null,\"val\":false},\"topRight\":{\"$id\":\"5\",\"bottomLeft\":null,\"bottomRight\":null,\"isLeaf\":true,\"topLeft\":null,\"topRight\":null,\"val\":false},\"val\":true},\"val\":true}","metaData":"{\r\n  \"name\": \"intersect\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"quadTree1\",\r\n      \"type\": \"Node\"\r\n    },\r\n    {\r\n      \"name\": \"quadTree2\",\r\n      \"type\": \"Node\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"Node\"\r\n  },\r\n  \"structures\": [\r\n    {\r\n      \"name\": \"Node\",\r\n      \"comment\": \"Definition for a QuadTree node.\",\r\n      \"members\": [\r\n        {\r\n          \"name\": \"val\",\r\n          \"type\": \"boolean\"\r\n        },\r\n        {\r\n          \"name\": \"isLeaf\",\r\n          \"type\": \"boolean\"\r\n        },\r\n        {\r\n          \"name\": \"topLeft\",\r\n          \"type\": \"Node\"\r\n        },\r\n        {\r\n          \"name\": \"topRight\",\r\n          \"type\": \"Node\"\r\n        },\r\n        {\r\n          \"name\": \"bottomLeft\",\r\n          \"type\": \"Node\"\r\n        },\r\n        {\r\n          \"name\": \"bottomRight\",\r\n          \"type\": \"Node\"\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}","judgerAvailable":true,"judgeType":"large","mysqlSchemas":[],"enableRunCode":true,"enableTestMode":false,"envInfo":"{\"cpp\": [\"C++\", \"<p>\\u7248\\u672c\\uff1a<code>g++ 6.3</code> \\u91c7\\u7528\\u6700\\u65b0C++ 14\\u6807\\u51c6\\u3002</p>\\r\\n\\r\\n<p>\\u7f16\\u8bd1\\u65f6\\uff0c\\u5c06\\u4f1a\\u91c7\\u7528<code>-O1</code>\\u7ea7\\u4f18\\u5316\\u3002<a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> \\u4e5f\\u88ab\\u5f00\\u542f\\u6765\\u68c0\\u6d4b<code>out-of-bounds</code>\\u548c<code>use-after-free</code>\\u9519\\u8bef\\u3002</p>\\r\\n\\r\\n<p>\\u4e3a\\u4e86\\u4f7f\\u7528\\u65b9\\u4fbf\\uff0c\\u5927\\u90e8\\u5206\\u6807\\u51c6\\u5e93\\u7684\\u5934\\u6587\\u4ef6\\u5df2\\u7ecf\\u88ab\\u81ea\\u52a8\\u5bfc\\u5165\\u3002</p>\"], \"java\": [\"Java\", \"<p>\\u7248\\u672c\\uff1a<code>Java 1.8.0</code>\\u3002\\u53ef\\u4ee5\\u4f7f\\u7528Java 8\\u7684\\u7279\\u6027\\u4f8b\\u5982\\uff0clambda expressions \\u548c stream API\\u3002</p>\\r\\n\\r\\n<p>\\u4e3a\\u4e86\\u65b9\\u4fbf\\u8d77\\u89c1\\uff0c\\u5927\\u90e8\\u5206\\u6807\\u51c6\\u5e93\\u7684\\u5934\\u6587\\u4ef6\\u5df2\\u88ab\\u5bfc\\u5165\\u3002</p>\"], \"python\": [\"Python\", \"<p>\\u7248\\u672c\\uff1a <code>Python 2.7.12</code></p>\\r\\n\\r\\n<p>\\u4e3a\\u4e86\\u65b9\\u4fbf\\u8d77\\u89c1\\uff0c\\u5927\\u90e8\\u5206\\u5e38\\u7528\\u5e93\\u5df2\\u7ecf\\u88ab\\u81ea\\u52a8 \\u5bfc\\u5165\\uff0c\\u5982\\uff1a<a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>\\u3002\\u5982\\u679c\\u60a8\\u9700\\u8981\\u4f7f\\u7528\\u5176\\u4ed6\\u5e93\\u51fd\\u6570\\uff0c\\u8bf7\\u81ea\\u884c\\u5bfc\\u5165\\u3002</p>\\r\\n\\r\\n<p>\\u6ce8\\u610f Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">\\u5c06\\u57282020\\u5e74\\u540e\\u4e0d\\u518d\\u7ef4\\u62a4</a>\\u3002 \\u5982\\u60f3\\u4f7f\\u7528\\u6700\\u65b0\\u7248\\u7684Python\\uff0c\\u8bf7\\u9009\\u62e9Python 3\\u3002</p>\"], \"csharp\": [\"C#\", \"<p><code>Mono 5.12.0</code>\\u63d0\\u4f9b\\u4e86<a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-7\\\" target=\\\"_blank\\\">\\u5bf9C# 7\\u7684\\u5168\\u9762\\u652f\\u6301</a>\\u3002</p>\\r\\n\\r\\n<p>\\u60a8\\u7684\\u4ee3\\u7801\\u5728\\u7f16\\u8bd1\\u65f6\\u9ed8\\u8ba4\\u5f00\\u542f\\u4e86debug\\u6807\\u8bb0(<code>/debug</code>)\\u3002</p>\"], \"javascript\": [\"JavaScript\", \"<p>\\u7248\\u672c\\uff1a<code>Nodejs 10.15.0</code></p>\\r\\n\\r\\n<p>\\u60a8\\u7684\\u4ee3\\u7801\\u5728\\u6267\\u884c\\u65f6\\u5c06\\u5e26\\u4e0a <code>--harmony</code> \\u6807\\u8bb0\\u6765\\u5f00\\u542f <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">\\u65b0\\u7248ES6\\u7279\\u6027</a>\\u3002</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> \\u5e93\\u5df2\\u7ecf\\u9ed8\\u8ba4\\u88ab\\u5305\\u542b\\u3002</p>\"], \"python3\": [\"Python3\", \"<p>\\u7248\\u672c\\uff1a<code>Python 3.6</code></p>\\r\\n\\r\\n<p>\\u4e3a\\u4e86\\u65b9\\u4fbf\\u8d77\\u89c1\\uff0c\\u5927\\u90e8\\u5206\\u5e38\\u7528\\u5e93\\u5df2\\u7ecf\\u88ab\\u81ea\\u52a8 \\u5bfc\\u5165\\uff0c\\u5982<a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>\\u3002 \\u5982\\u679c\\u60a8\\u9700\\u8981\\u4f7f\\u7528\\u5176\\u4ed6\\u5e93\\u51fd\\u6570\\uff0c\\u8bf7\\u81ea\\u884c\\u5bfc\\u5165\\u3002</p>\"], \"php\": [\"PHP\", \"<p>Run with <code>PHP 7.2</code>.</p>\"]}","__typename":"QuestionNode"}}}